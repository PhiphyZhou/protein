<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="namespace">
    <name>OpenMM</name>
    <filename>namespaceOpenMM.html</filename>
    <class kind="class">OpenMM::AmoebaAngleForce</class>
    <class kind="class">OpenMM::AmoebaBondForce</class>
    <class kind="class">OpenMM::AmoebaGeneralizedKirkwoodForce</class>
    <class kind="class">OpenMM::AmoebaInPlaneAngleForce</class>
    <class kind="class">OpenMM::AmoebaMultipoleForce</class>
    <class kind="class">OpenMM::AmoebaOutOfPlaneBendForce</class>
    <class kind="class">OpenMM::AmoebaPiTorsionForce</class>
    <class kind="class">OpenMM::AmoebaStretchBendForce</class>
    <class kind="class">OpenMM::AmoebaTorsionTorsionForce</class>
    <class kind="class">OpenMM::AmoebaVdwForce</class>
    <class kind="class">OpenMM::AmoebaWcaDispersionForce</class>
    <class kind="class">OpenMM::AndersenThermostat</class>
    <class kind="class">OpenMM::BrownianIntegrator</class>
    <class kind="class">OpenMM::CMAPTorsionForce</class>
    <class kind="class">OpenMM::CMMotionRemover</class>
    <class kind="class">OpenMM::Context</class>
    <class kind="class">OpenMM::Continuous1DFunction</class>
    <class kind="class">OpenMM::Continuous2DFunction</class>
    <class kind="class">OpenMM::Continuous3DFunction</class>
    <class kind="class">OpenMM::CustomAngleForce</class>
    <class kind="class">OpenMM::CustomBondForce</class>
    <class kind="class">OpenMM::CustomCompoundBondForce</class>
    <class kind="class">OpenMM::CustomExternalForce</class>
    <class kind="class">OpenMM::CustomGBForce</class>
    <class kind="class">OpenMM::CustomHbondForce</class>
    <class kind="class">OpenMM::CustomIntegrator</class>
    <class kind="class">OpenMM::CustomManyParticleForce</class>
    <class kind="class">OpenMM::CustomNonbondedForce</class>
    <class kind="class">OpenMM::CustomTorsionForce</class>
    <class kind="class">OpenMM::Discrete1DFunction</class>
    <class kind="class">OpenMM::Discrete2DFunction</class>
    <class kind="class">OpenMM::Discrete3DFunction</class>
    <class kind="class">OpenMM::DrudeForce</class>
    <class kind="class">OpenMM::DrudeLangevinIntegrator</class>
    <class kind="class">OpenMM::DrudeSCFIntegrator</class>
    <class kind="class">OpenMM::Force</class>
    <class kind="class">OpenMM::GBSAOBCForce</class>
    <class kind="class">OpenMM::GBVIForce</class>
    <class kind="class">OpenMM::HarmonicAngleForce</class>
    <class kind="class">OpenMM::HarmonicBondForce</class>
    <class kind="class">OpenMM::Integrator</class>
    <class kind="class">OpenMM::Kernel</class>
    <class kind="class">OpenMM::KernelFactory</class>
    <class kind="class">OpenMM::KernelImpl</class>
    <class kind="class">OpenMM::LangevinIntegrator</class>
    <class kind="class">OpenMM::LocalCoordinatesSite</class>
    <class kind="class">OpenMM::LocalEnergyMinimizer</class>
    <class kind="class">OpenMM::MonteCarloAnisotropicBarostat</class>
    <class kind="class">OpenMM::MonteCarloBarostat</class>
    <class kind="class">OpenMM::MonteCarloMembraneBarostat</class>
    <class kind="class">OpenMM::NonbondedForce</class>
    <class kind="class">OpenMM::OpenMMException</class>
    <class kind="class">OpenMM::OutOfPlaneSite</class>
    <class kind="class">OpenMM::PeriodicTorsionForce</class>
    <class kind="class">OpenMM::Platform</class>
    <class kind="class">OpenMM::RBTorsionForce</class>
    <class kind="class">OpenMM::RPMDIntegrator</class>
    <class kind="class">OpenMM::RPMDMonteCarloBarostat</class>
    <class kind="class">OpenMM::RPMDUpdater</class>
    <class kind="class">OpenMM::State</class>
    <class kind="class">OpenMM::System</class>
    <class kind="class">OpenMM::TabulatedFunction</class>
    <class kind="class">OpenMM::ThreeParticleAverageSite</class>
    <class kind="class">OpenMM::TwoParticleAverageSite</class>
    <class kind="class">OpenMM::VariableLangevinIntegrator</class>
    <class kind="class">OpenMM::VariableVerletIntegrator</class>
    <class kind="class">OpenMM::Vec3</class>
    <class kind="class">OpenMM::VerletIntegrator</class>
    <class kind="class">OpenMM::VirtualSite</class>
    <class kind="class">OpenMM::XmlSerializer</class>
    <member kind="typedef">
      <type>std::vector&lt; std::vector&lt; std::vector&lt; double &gt; &gt; &gt;</type>
      <name>TorsionTorsionGrid</name>
      <anchorfile>namespaceOpenMM.html</anchorfile>
      <anchor>a3a02f82f9c1d11694a56094bd75f72c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::vector&lt; std::vector&lt; float &gt; &gt; &gt;</type>
      <name>TorsionTorsionGridFloat</name>
      <anchorfile>namespaceOpenMM.html</anchorfile>
      <anchor>a2fde7299c2b50bb516c4fccd85263949</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::basic_ostream&lt; CHAR, TRAITS &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespaceOpenMM.html</anchorfile>
      <anchor>a9a410da4097c68e2f8dce192bcd2185e</anchor>
      <arglist>(std::basic_ostream&lt; CHAR, TRAITS &gt; &amp;o, const Vec3 &amp;v)</arglist>
    </member>
    <member kind="variable">
      <type>class OPENMM_EXPORT</type>
      <name>Force</name>
      <anchorfile>namespaceOpenMM.html</anchorfile>
      <anchor>ae3bad44a27aa9003b7679ff4df0f1c3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>class OPENMM_EXPORT</type>
      <name>VirtualSite</name>
      <anchorfile>namespaceOpenMM.html</anchorfile>
      <anchor>aedd35705313de6fc83a5e451510d58d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::AmoebaAngleForce</name>
    <filename>classOpenMM_1_1AmoebaAngleForce.html</filename>
    <base>OpenMM::Force</base>
    <member kind="function">
      <type></type>
      <name>AmoebaAngleForce</name>
      <anchorfile>classOpenMM_1_1AmoebaAngleForce.html</anchorfile>
      <anchor>a137064419d7c3ce4b2c66fc7315a726a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumAngles</name>
      <anchorfile>classOpenMM_1_1AmoebaAngleForce.html</anchorfile>
      <anchor>a6d6db7820f5284ccd108921214a49502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAmoebaGlobalAngleCubic</name>
      <anchorfile>classOpenMM_1_1AmoebaAngleForce.html</anchorfile>
      <anchor>a5076de815674c526c0b672cd0b5d8ed2</anchor>
      <arglist>(double cubicK)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAmoebaGlobalAngleCubic</name>
      <anchorfile>classOpenMM_1_1AmoebaAngleForce.html</anchorfile>
      <anchor>a91897291be63b081410d62e170c89831</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAmoebaGlobalAngleQuartic</name>
      <anchorfile>classOpenMM_1_1AmoebaAngleForce.html</anchorfile>
      <anchor>afa2cace6c892c5babd3eaab8de31d1c9</anchor>
      <arglist>(double quarticK)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAmoebaGlobalAngleQuartic</name>
      <anchorfile>classOpenMM_1_1AmoebaAngleForce.html</anchorfile>
      <anchor>a24d697a530ef171fb6f934fd13f120c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAmoebaGlobalAnglePentic</name>
      <anchorfile>classOpenMM_1_1AmoebaAngleForce.html</anchorfile>
      <anchor>a66c7c8a80cc33484aad4b560d003428e</anchor>
      <arglist>(double penticK)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAmoebaGlobalAnglePentic</name>
      <anchorfile>classOpenMM_1_1AmoebaAngleForce.html</anchorfile>
      <anchor>a4556642375d528b21062833957fce2aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAmoebaGlobalAngleSextic</name>
      <anchorfile>classOpenMM_1_1AmoebaAngleForce.html</anchorfile>
      <anchor>a81a06b6993b6d92080816d28ad6da2cc</anchor>
      <arglist>(double sexticK)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAmoebaGlobalAngleSextic</name>
      <anchorfile>classOpenMM_1_1AmoebaAngleForce.html</anchorfile>
      <anchor>a7fd5cd8bcbbfbfed3e5139d7ca1fc5c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAngle</name>
      <anchorfile>classOpenMM_1_1AmoebaAngleForce.html</anchorfile>
      <anchor>a7e9c3a3a058509c49d6277283dcf03bb</anchor>
      <arglist>(int particle1, int particle2, int particle3, double length, double quadraticK)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAngleParameters</name>
      <anchorfile>classOpenMM_1_1AmoebaAngleForce.html</anchorfile>
      <anchor>a65861152a429a7bd22f554c66ac34777</anchor>
      <arglist>(int index, int &amp;particle1, int &amp;particle2, int &amp;particle3, double &amp;length, double &amp;quadraticK) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngleParameters</name>
      <anchorfile>classOpenMM_1_1AmoebaAngleForce.html</anchorfile>
      <anchor>a23319b13cd33d2f086559ea758943179</anchor>
      <arglist>(int index, int particle1, int particle2, int particle3, double length, double quadraticK)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateParametersInContext</name>
      <anchorfile>classOpenMM_1_1AmoebaAngleForce.html</anchorfile>
      <anchor>abc3002dd21e2e02a9f9dfee170fa3711</anchor>
      <arglist>(Context &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1AmoebaAngleForce.html</anchorfile>
      <anchor>a392efd6ce97bb75e8544b94c94bc08bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Force</name>
      <anchorfile>classOpenMM_1_1Force.html</anchorfile>
      <anchor>afb0f4de1af73df67ed17260f56a9e6cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Force</name>
      <anchorfile>classOpenMM_1_1Force.html</anchorfile>
      <anchor>abe43937e5f4d66313e5084556992b92b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getForceGroup</name>
      <anchorfile>classOpenMM_1_1Force.html</anchorfile>
      <anchor>a295e039e00957b745da507e18f3ec8b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setForceGroup</name>
      <anchorfile>classOpenMM_1_1Force.html</anchorfile>
      <anchor>a159d60bf415030829c9ac2e3c493cb0a</anchor>
      <arglist>(int group)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1AmoebaAngleForce.html</anchorfile>
      <anchor>ae2504c62b5eed8f5dc13f469d4ed7894</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl &amp;</type>
      <name>getImplInContext</name>
      <anchorfile>classOpenMM_1_1Force.html</anchorfile>
      <anchor>a4a55ca982cfe140c790670aa8361c8a1</anchor>
      <arglist>(Context &amp;context)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ContextImpl &amp;</type>
      <name>getContextImpl</name>
      <anchorfile>classOpenMM_1_1Force.html</anchorfile>
      <anchor>a4e1b8420849d7bf94bf444787b421d25</anchor>
      <arglist>(Context &amp;context)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_globalCubicK</name>
      <anchorfile>classOpenMM_1_1AmoebaAngleForce.html</anchorfile>
      <anchor>acb5e878927fe1b85c0095e6d67e7e917</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_globalQuarticK</name>
      <anchorfile>classOpenMM_1_1AmoebaAngleForce.html</anchorfile>
      <anchor>a798c558f9790a8785a6eeb64aeb37eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_globalPenticK</name>
      <anchorfile>classOpenMM_1_1AmoebaAngleForce.html</anchorfile>
      <anchor>a0dca6f36ad59dd00463d24693e1cd3ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_globalSexticK</name>
      <anchorfile>classOpenMM_1_1AmoebaAngleForce.html</anchorfile>
      <anchor>a8b335375926301b8dd81c2c40fcd6834</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::AmoebaBondForce</name>
    <filename>classOpenMM_1_1AmoebaBondForce.html</filename>
    <base>OpenMM::Force</base>
    <member kind="function">
      <type></type>
      <name>AmoebaBondForce</name>
      <anchorfile>classOpenMM_1_1AmoebaBondForce.html</anchorfile>
      <anchor>ab1d9fcb61c90bcefd517b7d6031676dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBonds</name>
      <anchorfile>classOpenMM_1_1AmoebaBondForce.html</anchorfile>
      <anchor>a16f41cfeb5ee7f6163d00a230a031bcd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAmoebaGlobalBondCubic</name>
      <anchorfile>classOpenMM_1_1AmoebaBondForce.html</anchorfile>
      <anchor>a350ab4564d17c5a7c66ade7fdccd9455</anchor>
      <arglist>(double cubicK)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAmoebaGlobalBondCubic</name>
      <anchorfile>classOpenMM_1_1AmoebaBondForce.html</anchorfile>
      <anchor>a7038d967023bc5d1a22c21ed789be1a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAmoebaGlobalBondQuartic</name>
      <anchorfile>classOpenMM_1_1AmoebaBondForce.html</anchorfile>
      <anchor>a6a6e2cb1da5e794ebce51aadf65fa1ff</anchor>
      <arglist>(double quarticK)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAmoebaGlobalBondQuartic</name>
      <anchorfile>classOpenMM_1_1AmoebaBondForce.html</anchorfile>
      <anchor>af58cb4fcc72d3ac6dfd2ce7eb8ee6333</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addBond</name>
      <anchorfile>classOpenMM_1_1AmoebaBondForce.html</anchorfile>
      <anchor>a32d1ce1cd777da695ec86b0c26133d9b</anchor>
      <arglist>(int particle1, int particle2, double length, double quadraticK)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBondParameters</name>
      <anchorfile>classOpenMM_1_1AmoebaBondForce.html</anchorfile>
      <anchor>a695145c81beedb3b36e3cfc1618eb599</anchor>
      <arglist>(int index, int &amp;particle1, int &amp;particle2, double &amp;length, double &amp;quadraticK) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBondParameters</name>
      <anchorfile>classOpenMM_1_1AmoebaBondForce.html</anchorfile>
      <anchor>a61976a0d277bb9c8e4ec88d1a29a6b72</anchor>
      <arglist>(int index, int particle1, int particle2, double length, double quadraticK)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateParametersInContext</name>
      <anchorfile>classOpenMM_1_1AmoebaBondForce.html</anchorfile>
      <anchor>abc3002dd21e2e02a9f9dfee170fa3711</anchor>
      <arglist>(Context &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1AmoebaBondForce.html</anchorfile>
      <anchor>a392efd6ce97bb75e8544b94c94bc08bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1AmoebaBondForce.html</anchorfile>
      <anchor>ae2504c62b5eed8f5dc13f469d4ed7894</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_globalQuarticK</name>
      <anchorfile>classOpenMM_1_1AmoebaBondForce.html</anchorfile>
      <anchor>a798c558f9790a8785a6eeb64aeb37eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_globalCubicK</name>
      <anchorfile>classOpenMM_1_1AmoebaBondForce.html</anchorfile>
      <anchor>acb5e878927fe1b85c0095e6d67e7e917</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::AmoebaGeneralizedKirkwoodForce</name>
    <filename>classOpenMM_1_1AmoebaGeneralizedKirkwoodForce.html</filename>
    <base>OpenMM::Force</base>
    <member kind="function">
      <type></type>
      <name>AmoebaGeneralizedKirkwoodForce</name>
      <anchorfile>classOpenMM_1_1AmoebaGeneralizedKirkwoodForce.html</anchorfile>
      <anchor>a66de15e6e075b93ff591eb10f9336e88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumParticles</name>
      <anchorfile>classOpenMM_1_1AmoebaGeneralizedKirkwoodForce.html</anchorfile>
      <anchor>abb6f8d8c14d432090000f19e8beafa99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addParticle</name>
      <anchorfile>classOpenMM_1_1AmoebaGeneralizedKirkwoodForce.html</anchorfile>
      <anchor>abad74551810bef20798fe24ffa7b4e91</anchor>
      <arglist>(double charge, double radius, double scalingFactor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParticleParameters</name>
      <anchorfile>classOpenMM_1_1AmoebaGeneralizedKirkwoodForce.html</anchorfile>
      <anchor>a8bfd0a9cbdb7491ca431ae005c351bef</anchor>
      <arglist>(int index, double &amp;charge, double &amp;radius, double &amp;scalingFactor) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticleParameters</name>
      <anchorfile>classOpenMM_1_1AmoebaGeneralizedKirkwoodForce.html</anchorfile>
      <anchor>a2e41c8f2ca482df7f8b5ca289674f7c5</anchor>
      <arglist>(int index, double charge, double radius, double scalingFactor)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSolventDielectric</name>
      <anchorfile>classOpenMM_1_1AmoebaGeneralizedKirkwoodForce.html</anchorfile>
      <anchor>a936397a02cce817fc3c91317bb9009cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSolventDielectric</name>
      <anchorfile>classOpenMM_1_1AmoebaGeneralizedKirkwoodForce.html</anchorfile>
      <anchor>a87536d9d2f9c494220b1fc2c8e3f004b</anchor>
      <arglist>(double dielectric)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSoluteDielectric</name>
      <anchorfile>classOpenMM_1_1AmoebaGeneralizedKirkwoodForce.html</anchorfile>
      <anchor>ab69b68443225c10dc15f54ec5d4ba0d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSoluteDielectric</name>
      <anchorfile>classOpenMM_1_1AmoebaGeneralizedKirkwoodForce.html</anchorfile>
      <anchor>a77c95618f97773dced0ac319a07f139c</anchor>
      <arglist>(double dielectric)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIncludeCavityTerm</name>
      <anchorfile>classOpenMM_1_1AmoebaGeneralizedKirkwoodForce.html</anchorfile>
      <anchor>a4d8434b98fe5c8d36c97717d21d610e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIncludeCavityTerm</name>
      <anchorfile>classOpenMM_1_1AmoebaGeneralizedKirkwoodForce.html</anchorfile>
      <anchor>a60aadcd02d78a915d9e88c826b355a9c</anchor>
      <arglist>(int includeCavityTerm)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getProbeRadius</name>
      <anchorfile>classOpenMM_1_1AmoebaGeneralizedKirkwoodForce.html</anchorfile>
      <anchor>ac22ef06f42210522b2d109fbca145267</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProbeRadius</name>
      <anchorfile>classOpenMM_1_1AmoebaGeneralizedKirkwoodForce.html</anchorfile>
      <anchor>ab22c01cde366f4a7c6d67d0f6a049202</anchor>
      <arglist>(double probeRadius)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSurfaceAreaFactor</name>
      <anchorfile>classOpenMM_1_1AmoebaGeneralizedKirkwoodForce.html</anchorfile>
      <anchor>aa16741ad348c400f86ee1c918acbcfc6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSurfaceAreaFactor</name>
      <anchorfile>classOpenMM_1_1AmoebaGeneralizedKirkwoodForce.html</anchorfile>
      <anchor>a705becf3bac2e68bd14c259d69159541</anchor>
      <arglist>(double surfaceAreaFactor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateParametersInContext</name>
      <anchorfile>classOpenMM_1_1AmoebaGeneralizedKirkwoodForce.html</anchorfile>
      <anchor>abc3002dd21e2e02a9f9dfee170fa3711</anchor>
      <arglist>(Context &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1AmoebaGeneralizedKirkwoodForce.html</anchorfile>
      <anchor>a392efd6ce97bb75e8544b94c94bc08bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1AmoebaGeneralizedKirkwoodForce.html</anchorfile>
      <anchor>ae2504c62b5eed8f5dc13f469d4ed7894</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::AmoebaInPlaneAngleForce</name>
    <filename>classOpenMM_1_1AmoebaInPlaneAngleForce.html</filename>
    <base>OpenMM::Force</base>
    <member kind="function">
      <type></type>
      <name>AmoebaInPlaneAngleForce</name>
      <anchorfile>classOpenMM_1_1AmoebaInPlaneAngleForce.html</anchorfile>
      <anchor>a1024c1a0950d12f84965aa4dcd30131d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumAngles</name>
      <anchorfile>classOpenMM_1_1AmoebaInPlaneAngleForce.html</anchorfile>
      <anchor>a6d6db7820f5284ccd108921214a49502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAmoebaGlobalInPlaneAngleCubic</name>
      <anchorfile>classOpenMM_1_1AmoebaInPlaneAngleForce.html</anchorfile>
      <anchor>a19a2639acc1144de3858648f4fdb8012</anchor>
      <arglist>(double cubicK)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAmoebaGlobalInPlaneAngleCubic</name>
      <anchorfile>classOpenMM_1_1AmoebaInPlaneAngleForce.html</anchorfile>
      <anchor>ac350567474e41438bbb4a90c079d7f38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAmoebaGlobalInPlaneAngleQuartic</name>
      <anchorfile>classOpenMM_1_1AmoebaInPlaneAngleForce.html</anchorfile>
      <anchor>ac2874e49d026de983ff161edae885b56</anchor>
      <arglist>(double quarticK)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAmoebaGlobalInPlaneAngleQuartic</name>
      <anchorfile>classOpenMM_1_1AmoebaInPlaneAngleForce.html</anchorfile>
      <anchor>aaf13cb9c23fc2190f4b14c3050df2418</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAmoebaGlobalInPlaneAnglePentic</name>
      <anchorfile>classOpenMM_1_1AmoebaInPlaneAngleForce.html</anchorfile>
      <anchor>aafc1a47de423210a42af0210395e6e80</anchor>
      <arglist>(double penticK)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAmoebaGlobalInPlaneAnglePentic</name>
      <anchorfile>classOpenMM_1_1AmoebaInPlaneAngleForce.html</anchorfile>
      <anchor>aa5e10ef40a91b27fa2d2cc155d730cc7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAmoebaGlobalInPlaneAngleSextic</name>
      <anchorfile>classOpenMM_1_1AmoebaInPlaneAngleForce.html</anchorfile>
      <anchor>ace16554ffef7bc4e82f35b8be219af99</anchor>
      <arglist>(double sexticK)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAmoebaGlobalInPlaneAngleSextic</name>
      <anchorfile>classOpenMM_1_1AmoebaInPlaneAngleForce.html</anchorfile>
      <anchor>aacdd2f4d9ae02ff17c590cf07e889c4c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAngle</name>
      <anchorfile>classOpenMM_1_1AmoebaInPlaneAngleForce.html</anchorfile>
      <anchor>a9ba96cd066c95ee4350fd8896a7587b5</anchor>
      <arglist>(int particle1, int particle2, int particle3, int particle4, double length, double quadraticK)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAngleParameters</name>
      <anchorfile>classOpenMM_1_1AmoebaInPlaneAngleForce.html</anchorfile>
      <anchor>ab4bf165b62cc08ba8e319c2c787ee5c5</anchor>
      <arglist>(int index, int &amp;particle1, int &amp;particle2, int &amp;particle3, int &amp;particle4, double &amp;length, double &amp;quadraticK) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngleParameters</name>
      <anchorfile>classOpenMM_1_1AmoebaInPlaneAngleForce.html</anchorfile>
      <anchor>a9e059a9bf00f8f2fa4b00f8f5d01ab7c</anchor>
      <arglist>(int index, int particle1, int particle2, int particle3, int particle4, double length, double quadraticK)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateParametersInContext</name>
      <anchorfile>classOpenMM_1_1AmoebaInPlaneAngleForce.html</anchorfile>
      <anchor>abc3002dd21e2e02a9f9dfee170fa3711</anchor>
      <arglist>(Context &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1AmoebaInPlaneAngleForce.html</anchorfile>
      <anchor>a392efd6ce97bb75e8544b94c94bc08bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1AmoebaInPlaneAngleForce.html</anchorfile>
      <anchor>ae2504c62b5eed8f5dc13f469d4ed7894</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_globalCubicK</name>
      <anchorfile>classOpenMM_1_1AmoebaInPlaneAngleForce.html</anchorfile>
      <anchor>acb5e878927fe1b85c0095e6d67e7e917</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_globalQuarticK</name>
      <anchorfile>classOpenMM_1_1AmoebaInPlaneAngleForce.html</anchorfile>
      <anchor>a798c558f9790a8785a6eeb64aeb37eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_globalPenticK</name>
      <anchorfile>classOpenMM_1_1AmoebaInPlaneAngleForce.html</anchorfile>
      <anchor>a0dca6f36ad59dd00463d24693e1cd3ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_globalSexticK</name>
      <anchorfile>classOpenMM_1_1AmoebaInPlaneAngleForce.html</anchorfile>
      <anchor>a8b335375926301b8dd81c2c40fcd6834</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::AmoebaMultipoleForce</name>
    <filename>classOpenMM_1_1AmoebaMultipoleForce.html</filename>
    <base>OpenMM::Force</base>
    <member kind="enumeration">
      <type></type>
      <name>NonbondedMethod</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NoCutoff</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390a007d65056b9c2fce5e5549b28e4e2ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PME</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390a6d2e0d14bacd7aea16f4739b89d4b463</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PolarizationType</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a3a83996526140ddc31993e5d64b9ab7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Mutual</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a3a83996526140ddc31993e5d64b9ab7eafd0e80c8aad2efccd035743619d9cdb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Direct</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a3a83996526140ddc31993e5d64b9ab7ea5c694b75a28b59072272191aeb5f30a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MultipoleAxisTypes</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a6a7b4881cdfa13ec7df2918f7d078ce7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ZThenX</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a6a7b4881cdfa13ec7df2918f7d078ce7a2b18ff3d37298e1c6cf458f39f4e44fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Bisector</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a6a7b4881cdfa13ec7df2918f7d078ce7a39147f52f15bfcd35e0e3eecfc461063</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ZBisect</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a6a7b4881cdfa13ec7df2918f7d078ce7a75aef089ea53d9a470481c42723a6089</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ThreeFold</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a6a7b4881cdfa13ec7df2918f7d078ce7a22a1622049e4fddda36208a559a8f70b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ZOnly</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a6a7b4881cdfa13ec7df2918f7d078ce7a8b4d324934aca4b9fa1534dd89d6479b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NoAxisType</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a6a7b4881cdfa13ec7df2918f7d078ce7a30f30d1b4f8e6471472c4d1b800ff908</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>LastAxisTypeIndex</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a6a7b4881cdfa13ec7df2918f7d078ce7a7e83916f6d47946db720839a0fc3e62b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CovalentType</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a643e43bab972553564977861d9f3040e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Covalent12</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a643e43bab972553564977861d9f3040ead2bcb0997b08b4811c9a0f5dafc71f6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Covalent13</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a643e43bab972553564977861d9f3040ea64a28d82772a9df338ea206614cf0512</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Covalent14</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a643e43bab972553564977861d9f3040ea897d6df48661c810cfa0e7a85353ac0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Covalent15</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a643e43bab972553564977861d9f3040ea9c9b34f89bb04a7ad09d5abd98b6aee7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PolarizationCovalent11</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a643e43bab972553564977861d9f3040ea7e4feeee696e39f70042a9ba66a2a537</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PolarizationCovalent12</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a643e43bab972553564977861d9f3040ea79c21393567d3453ccd9aac47c20fe19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PolarizationCovalent13</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a643e43bab972553564977861d9f3040eaf590309d773fa2d76feeed29cd9fbcb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PolarizationCovalent14</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a643e43bab972553564977861d9f3040ead6028e59df8eb5b4bddbf62df76c63c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CovalentEnd</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a643e43bab972553564977861d9f3040eaa47826b0da09ab6a50af32bdda1ab5de</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AmoebaMultipoleForce</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>aad69cbca5b31b98265d641ad92c2ae40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumMultipoles</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a6359d1c9b48ea71daae481104cc36ecc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NonbondedMethod</type>
      <name>getNonbondedMethod</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a39b8aa497b6303d1ceaa0c56311f52a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNonbondedMethod</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a705d5824b99e09178ec842c46681fe66</anchor>
      <arglist>(NonbondedMethod method)</arglist>
    </member>
    <member kind="function">
      <type>PolarizationType</type>
      <name>getPolarizationType</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a45cdc1562d117bbe78b5a6faea6518f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPolarizationType</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>aeb46f3e9fd4ac68f5e94b2ae3482ff67</anchor>
      <arglist>(PolarizationType type)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCutoffDistance</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a5ed4b7977b5b798d0119735dc2a2add6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCutoffDistance</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>aca0f3cbeec7aac67e140f0ed2f67b526</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAEwald</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>ae9d22f6a0686689c563a35f548a700b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAEwald</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a4472580ba536a88ef073f9793384b7cb</anchor>
      <arglist>(double aewald)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getPmeBSplineOrder</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a199497e26a947572261ec0ab3c53da27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPmeGridDimensions</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a74190365c4c7bb1aa16afc5e71e4a3de</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;gridDimension) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPmeGridDimensions</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a90451c32791712e9734b60a5395960b5</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;gridDimension)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addMultipole</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a403ebc31b085e9af845d3348114eee30</anchor>
      <arglist>(double charge, const std::vector&lt; double &gt; &amp;molecularDipole, const std::vector&lt; double &gt; &amp;molecularQuadrupole, int axisType, int multipoleAtomZ, int multipoleAtomX, int multipoleAtomY, double thole, double dampingFactor, double polarity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getMultipoleParameters</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a531cc0b1f86604f17c45b0ae31f7d5ff</anchor>
      <arglist>(int index, double &amp;charge, std::vector&lt; double &gt; &amp;molecularDipole, std::vector&lt; double &gt; &amp;molecularQuadrupole, int &amp;axisType, int &amp;multipoleAtomZ, int &amp;multipoleAtomX, int &amp;multipoleAtomY, double &amp;thole, double &amp;dampingFactor, double &amp;polarity) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMultipoleParameters</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a5a1226f5f33acd2f93993706662c2882</anchor>
      <arglist>(int index, double charge, const std::vector&lt; double &gt; &amp;molecularDipole, const std::vector&lt; double &gt; &amp;molecularQuadrupole, int axisType, int multipoleAtomZ, int multipoleAtomX, int multipoleAtomY, double thole, double dampingFactor, double polarity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCovalentMap</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a2a886d5288bb4c74df5c6522f00ec318</anchor>
      <arglist>(int index, CovalentType typeId, const std::vector&lt; int &gt; &amp;covalentAtoms)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCovalentMap</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a92df64924b74dce90c8086417a14d421</anchor>
      <arglist>(int index, CovalentType typeId, std::vector&lt; int &gt; &amp;covalentAtoms) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCovalentMaps</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>ac9dd9a2cb7836cff1dddc80017d3a67e</anchor>
      <arglist>(int index, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;covalentLists) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMutualInducedMaxIterations</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>ac29a43705354505557b06a171ee01cb2</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMutualInducedMaxIterations</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a32f467d2f4ac4e020c3fca93524cb0bb</anchor>
      <arglist>(int inputMutualInducedMaxIterations)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMutualInducedTargetEpsilon</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a2028f4959aa62a01098d94ce8de07791</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMutualInducedTargetEpsilon</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>aa8873e69e90691f787635356a18da8e8</anchor>
      <arglist>(double inputMutualInducedTargetEpsilon)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEwaldErrorTolerance</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a2c0018057264fe973ca77aff480f997a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEwaldErrorTolerance</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a847ca50353d560e71f9de06af503438b</anchor>
      <arglist>(double tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getInducedDipoles</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>af11be20e58d15c68a555645c7e24a1c3</anchor>
      <arglist>(Context &amp;context, std::vector&lt; Vec3 &gt; &amp;dipoles)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getElectrostaticPotential</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>ab9a1355490345891f4cbed53a196e299</anchor>
      <arglist>(const std::vector&lt; Vec3 &gt; &amp;inputGrid, Context &amp;context, std::vector&lt; double &gt; &amp;outputElectrostaticPotential)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getSystemMultipoleMoments</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a3bbca418f0ad9bcfd1010ef1ef89d25b</anchor>
      <arglist>(Context &amp;context, std::vector&lt; double &gt; &amp;outputMultipoleMoments)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateParametersInContext</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>abc3002dd21e2e02a9f9dfee170fa3711</anchor>
      <arglist>(Context &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>a392efd6ce97bb75e8544b94c94bc08bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1AmoebaMultipoleForce.html</anchorfile>
      <anchor>ae2504c62b5eed8f5dc13f469d4ed7894</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::AmoebaOutOfPlaneBendForce</name>
    <filename>classOpenMM_1_1AmoebaOutOfPlaneBendForce.html</filename>
    <base>OpenMM::Force</base>
    <member kind="function">
      <type></type>
      <name>AmoebaOutOfPlaneBendForce</name>
      <anchorfile>classOpenMM_1_1AmoebaOutOfPlaneBendForce.html</anchorfile>
      <anchor>a7e8cbda822f887d53a5e0a5ad0cbe617</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumOutOfPlaneBends</name>
      <anchorfile>classOpenMM_1_1AmoebaOutOfPlaneBendForce.html</anchorfile>
      <anchor>a3de2017e4d5d31051048c1c0efe37a98</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAmoebaGlobalOutOfPlaneBendCubic</name>
      <anchorfile>classOpenMM_1_1AmoebaOutOfPlaneBendForce.html</anchorfile>
      <anchor>aad632f87c08f81856625dab84df2362f</anchor>
      <arglist>(double cubicK)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAmoebaGlobalOutOfPlaneBendCubic</name>
      <anchorfile>classOpenMM_1_1AmoebaOutOfPlaneBendForce.html</anchorfile>
      <anchor>ae081a8ba1b8ae21e955dfc65d10cbe4c</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAmoebaGlobalOutOfPlaneBendQuartic</name>
      <anchorfile>classOpenMM_1_1AmoebaOutOfPlaneBendForce.html</anchorfile>
      <anchor>ad35e60e6d7598628f8fafaeaa0244d5f</anchor>
      <arglist>(double quarticK)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAmoebaGlobalOutOfPlaneBendQuartic</name>
      <anchorfile>classOpenMM_1_1AmoebaOutOfPlaneBendForce.html</anchorfile>
      <anchor>a26f2a1290dc96ed592bc2e21cf939842</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAmoebaGlobalOutOfPlaneBendPentic</name>
      <anchorfile>classOpenMM_1_1AmoebaOutOfPlaneBendForce.html</anchorfile>
      <anchor>a6fd4e43120ec9f56f6e9f0a6b4929590</anchor>
      <arglist>(double penticK)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAmoebaGlobalOutOfPlaneBendPentic</name>
      <anchorfile>classOpenMM_1_1AmoebaOutOfPlaneBendForce.html</anchorfile>
      <anchor>aa1d36dc462457144b04826c61b23306b</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAmoebaGlobalOutOfPlaneBendSextic</name>
      <anchorfile>classOpenMM_1_1AmoebaOutOfPlaneBendForce.html</anchorfile>
      <anchor>a43e622c1b218025a6e9fd587c1d25b4f</anchor>
      <arglist>(double sexticK)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAmoebaGlobalOutOfPlaneBendSextic</name>
      <anchorfile>classOpenMM_1_1AmoebaOutOfPlaneBendForce.html</anchorfile>
      <anchor>a106990d1eeee39cd14c91ebdb1cddb71</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addOutOfPlaneBend</name>
      <anchorfile>classOpenMM_1_1AmoebaOutOfPlaneBendForce.html</anchorfile>
      <anchor>adef093c0dd052ffc2f1fc041fd6b05fa</anchor>
      <arglist>(int particle1, int particle2, int particle3, int particle4, double k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getOutOfPlaneBendParameters</name>
      <anchorfile>classOpenMM_1_1AmoebaOutOfPlaneBendForce.html</anchorfile>
      <anchor>a8b6489d64edf60d65b27e8cb796e5e25</anchor>
      <arglist>(int index, int &amp;particle1, int &amp;particle2, int &amp;particle3, int &amp;particle4, double &amp;k) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutOfPlaneBendParameters</name>
      <anchorfile>classOpenMM_1_1AmoebaOutOfPlaneBendForce.html</anchorfile>
      <anchor>aaa9336d5bddc37f66430c80bd6f6d06d</anchor>
      <arglist>(int index, int particle1, int particle2, int particle3, int particle4, double k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateParametersInContext</name>
      <anchorfile>classOpenMM_1_1AmoebaOutOfPlaneBendForce.html</anchorfile>
      <anchor>abc3002dd21e2e02a9f9dfee170fa3711</anchor>
      <arglist>(Context &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1AmoebaOutOfPlaneBendForce.html</anchorfile>
      <anchor>a392efd6ce97bb75e8544b94c94bc08bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1AmoebaOutOfPlaneBendForce.html</anchorfile>
      <anchor>ae2504c62b5eed8f5dc13f469d4ed7894</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_globalCubicK</name>
      <anchorfile>classOpenMM_1_1AmoebaOutOfPlaneBendForce.html</anchorfile>
      <anchor>acb5e878927fe1b85c0095e6d67e7e917</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_globalQuarticK</name>
      <anchorfile>classOpenMM_1_1AmoebaOutOfPlaneBendForce.html</anchorfile>
      <anchor>a798c558f9790a8785a6eeb64aeb37eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_globalPenticK</name>
      <anchorfile>classOpenMM_1_1AmoebaOutOfPlaneBendForce.html</anchorfile>
      <anchor>a0dca6f36ad59dd00463d24693e1cd3ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>_globalSexticK</name>
      <anchorfile>classOpenMM_1_1AmoebaOutOfPlaneBendForce.html</anchorfile>
      <anchor>a8b335375926301b8dd81c2c40fcd6834</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::AmoebaPiTorsionForce</name>
    <filename>classOpenMM_1_1AmoebaPiTorsionForce.html</filename>
    <base>OpenMM::Force</base>
    <member kind="function">
      <type></type>
      <name>AmoebaPiTorsionForce</name>
      <anchorfile>classOpenMM_1_1AmoebaPiTorsionForce.html</anchorfile>
      <anchor>a4727582eac65365a2d4ac2f69878ae6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPiTorsions</name>
      <anchorfile>classOpenMM_1_1AmoebaPiTorsionForce.html</anchorfile>
      <anchor>a93b317172aefe5611e6620d02f41464d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addPiTorsion</name>
      <anchorfile>classOpenMM_1_1AmoebaPiTorsionForce.html</anchorfile>
      <anchor>aa0d36824da79a9db6c6f5d8f5bb4e113</anchor>
      <arglist>(int particle1, int particle2, int particle3, int particle4, int particle5, int particle6, double k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPiTorsionParameters</name>
      <anchorfile>classOpenMM_1_1AmoebaPiTorsionForce.html</anchorfile>
      <anchor>a1eaa6a29beb29373e30437c8fc6c207e</anchor>
      <arglist>(int index, int &amp;particle1, int &amp;particle2, int &amp;particle3, int &amp;particle4, int &amp;particle5, int &amp;particle6, double &amp;k) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPiTorsionParameters</name>
      <anchorfile>classOpenMM_1_1AmoebaPiTorsionForce.html</anchorfile>
      <anchor>a8468d1b82ce030aa139a8900b8bcb896</anchor>
      <arglist>(int index, int particle1, int particle2, int particle3, int particle4, int particle5, int particle6, double k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateParametersInContext</name>
      <anchorfile>classOpenMM_1_1AmoebaPiTorsionForce.html</anchorfile>
      <anchor>abc3002dd21e2e02a9f9dfee170fa3711</anchor>
      <arglist>(Context &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1AmoebaPiTorsionForce.html</anchorfile>
      <anchor>a392efd6ce97bb75e8544b94c94bc08bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1AmoebaPiTorsionForce.html</anchorfile>
      <anchor>ae2504c62b5eed8f5dc13f469d4ed7894</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::AmoebaStretchBendForce</name>
    <filename>classOpenMM_1_1AmoebaStretchBendForce.html</filename>
    <base>OpenMM::Force</base>
    <member kind="function">
      <type></type>
      <name>AmoebaStretchBendForce</name>
      <anchorfile>classOpenMM_1_1AmoebaStretchBendForce.html</anchorfile>
      <anchor>a0ade18781153f8ff694f4cb2e7875b7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumStretchBends</name>
      <anchorfile>classOpenMM_1_1AmoebaStretchBendForce.html</anchorfile>
      <anchor>af986c00c4ac5aeec2637b8741c999bc0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addStretchBend</name>
      <anchorfile>classOpenMM_1_1AmoebaStretchBendForce.html</anchorfile>
      <anchor>ae7bb2fca69e3abc496d8e7c49f209582</anchor>
      <arglist>(int particle1, int particle2, int particle3, double lengthAB, double lengthCB, double angle, double k1, double k2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getStretchBendParameters</name>
      <anchorfile>classOpenMM_1_1AmoebaStretchBendForce.html</anchorfile>
      <anchor>a457e1a264bbe502078066577d5c0599b</anchor>
      <arglist>(int index, int &amp;particle1, int &amp;particle2, int &amp;particle3, double &amp;lengthAB, double &amp;lengthCB, double &amp;angle, double &amp;k1, double &amp;k2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStretchBendParameters</name>
      <anchorfile>classOpenMM_1_1AmoebaStretchBendForce.html</anchorfile>
      <anchor>ac7c892a73dcc5c8bbb45bca88d644cbc</anchor>
      <arglist>(int index, int particle1, int particle2, int particle3, double lengthAB, double lengthCB, double angle, double k1, double k2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateParametersInContext</name>
      <anchorfile>classOpenMM_1_1AmoebaStretchBendForce.html</anchorfile>
      <anchor>abc3002dd21e2e02a9f9dfee170fa3711</anchor>
      <arglist>(Context &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1AmoebaStretchBendForce.html</anchorfile>
      <anchor>a392efd6ce97bb75e8544b94c94bc08bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1AmoebaStretchBendForce.html</anchorfile>
      <anchor>ae2504c62b5eed8f5dc13f469d4ed7894</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::AmoebaTorsionTorsionForce</name>
    <filename>classOpenMM_1_1AmoebaTorsionTorsionForce.html</filename>
    <base>OpenMM::Force</base>
    <member kind="function">
      <type></type>
      <name>AmoebaTorsionTorsionForce</name>
      <anchorfile>classOpenMM_1_1AmoebaTorsionTorsionForce.html</anchorfile>
      <anchor>a00f3eda7951637ac4bb10699e8e6c394</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTorsionTorsions</name>
      <anchorfile>classOpenMM_1_1AmoebaTorsionTorsionForce.html</anchorfile>
      <anchor>a149d1f527e0391461f289b997e0144e4</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTorsionTorsionGrids</name>
      <anchorfile>classOpenMM_1_1AmoebaTorsionTorsionForce.html</anchorfile>
      <anchor>aca6e0dee2eb61caa2fb9c27bd7bc139a</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addTorsionTorsion</name>
      <anchorfile>classOpenMM_1_1AmoebaTorsionTorsionForce.html</anchorfile>
      <anchor>a2629b5862e1823375cfe9c36835588c0</anchor>
      <arglist>(int particle1, int particle2, int particle3, int particle4, int particle5, int chiralCheckAtomIndex, int gridIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTorsionTorsionParameters</name>
      <anchorfile>classOpenMM_1_1AmoebaTorsionTorsionForce.html</anchorfile>
      <anchor>aac39ec1e5ef385af3b8c8d4b06ae3df2</anchor>
      <arglist>(int index, int &amp;particle1, int &amp;particle2, int &amp;particle3, int &amp;particle4, int &amp;particle5, int &amp;chiralCheckAtomIndex, int &amp;gridIndex) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTorsionTorsionParameters</name>
      <anchorfile>classOpenMM_1_1AmoebaTorsionTorsionForce.html</anchorfile>
      <anchor>ae53a011b30a3716745e6a846461424a4</anchor>
      <arglist>(int index, int particle1, int particle2, int particle3, int particle4, int particle5, int chiralCheckAtomIndex, int gridIndex)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; std::vector&lt; double &gt; &gt; &gt; &amp;</type>
      <name>getTorsionTorsionGrid</name>
      <anchorfile>classOpenMM_1_1AmoebaTorsionTorsionForce.html</anchorfile>
      <anchor>a164efbe57dce30a683d7bfabe11b9d94</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTorsionTorsionGrid</name>
      <anchorfile>classOpenMM_1_1AmoebaTorsionTorsionForce.html</anchorfile>
      <anchor>a5561abd9d71f75421c597d52bd157c9c</anchor>
      <arglist>(int index, const std::vector&lt; std::vector&lt; std::vector&lt; double &gt; &gt; &gt; &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1AmoebaTorsionTorsionForce.html</anchorfile>
      <anchor>a392efd6ce97bb75e8544b94c94bc08bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1AmoebaTorsionTorsionForce.html</anchorfile>
      <anchor>ae2504c62b5eed8f5dc13f469d4ed7894</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::AmoebaVdwForce</name>
    <filename>classOpenMM_1_1AmoebaVdwForce.html</filename>
    <base>OpenMM::Force</base>
    <member kind="enumeration">
      <type></type>
      <name>NonbondedMethod</name>
      <anchorfile>classOpenMM_1_1AmoebaVdwForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NoCutoff</name>
      <anchorfile>classOpenMM_1_1AmoebaVdwForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390a007d65056b9c2fce5e5549b28e4e2ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CutoffPeriodic</name>
      <anchorfile>classOpenMM_1_1AmoebaVdwForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390a168a54330e90997ff68501baaaa41ccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AmoebaVdwForce</name>
      <anchorfile>classOpenMM_1_1AmoebaVdwForce.html</anchorfile>
      <anchor>aaa44b156f874a659c6829538c4eb9915</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumParticles</name>
      <anchorfile>classOpenMM_1_1AmoebaVdwForce.html</anchorfile>
      <anchor>abb6f8d8c14d432090000f19e8beafa99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticleParameters</name>
      <anchorfile>classOpenMM_1_1AmoebaVdwForce.html</anchorfile>
      <anchor>ace187ecca5ec76e8e9df8f267b252821</anchor>
      <arglist>(int particleIndex, int parentIndex, double sigma, double epsilon, double reductionFactor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParticleParameters</name>
      <anchorfile>classOpenMM_1_1AmoebaVdwForce.html</anchorfile>
      <anchor>a2842172d60788e4ece79f1a92766b6d5</anchor>
      <arglist>(int particleIndex, int &amp;parentIndex, double &amp;sigma, double &amp;epsilon, double &amp;reductionFactor) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addParticle</name>
      <anchorfile>classOpenMM_1_1AmoebaVdwForce.html</anchorfile>
      <anchor>a4f78dd57c0e2eaca8733df19b247b2f8</anchor>
      <arglist>(int parentIndex, double sigma, double epsilon, double reductionFactor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSigmaCombiningRule</name>
      <anchorfile>classOpenMM_1_1AmoebaVdwForce.html</anchorfile>
      <anchor>a61d8d4be7bceb8544d9a839293179bc5</anchor>
      <arglist>(const std::string &amp;sigmaCombiningRule)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getSigmaCombiningRule</name>
      <anchorfile>classOpenMM_1_1AmoebaVdwForce.html</anchorfile>
      <anchor>abe015c01ee13de8a59ba3d55aabfaa66</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEpsilonCombiningRule</name>
      <anchorfile>classOpenMM_1_1AmoebaVdwForce.html</anchorfile>
      <anchor>af5f4a0e3f01e21f2a4fad97f82532447</anchor>
      <arglist>(const std::string &amp;epsilonCombiningRule)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getEpsilonCombiningRule</name>
      <anchorfile>classOpenMM_1_1AmoebaVdwForce.html</anchorfile>
      <anchor>a1983e9c8ff04515479644b2ea595a60d</anchor>
      <arglist>(void) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUseDispersionCorrection</name>
      <anchorfile>classOpenMM_1_1AmoebaVdwForce.html</anchorfile>
      <anchor>a839b52f41aac7e709c3d68126db75b8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseDispersionCorrection</name>
      <anchorfile>classOpenMM_1_1AmoebaVdwForce.html</anchorfile>
      <anchor>aec6d1c5b7ed41eae62c2550f75ac401d</anchor>
      <arglist>(bool useCorrection)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticleExclusions</name>
      <anchorfile>classOpenMM_1_1AmoebaVdwForce.html</anchorfile>
      <anchor>a8a9d89a0c8ff2683d1ebd57bd3399402</anchor>
      <arglist>(int particleIndex, const std::vector&lt; int &gt; &amp;exclusions)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParticleExclusions</name>
      <anchorfile>classOpenMM_1_1AmoebaVdwForce.html</anchorfile>
      <anchor>a0559a98b79cc75c7224ee9f63b3b5331</anchor>
      <arglist>(int particleIndex, std::vector&lt; int &gt; &amp;exclusions) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCutoff</name>
      <anchorfile>classOpenMM_1_1AmoebaVdwForce.html</anchorfile>
      <anchor>a74d8ee914783dc45cbb9cfada280229c</anchor>
      <arglist>(double cutoff)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCutoff</name>
      <anchorfile>classOpenMM_1_1AmoebaVdwForce.html</anchorfile>
      <anchor>ac8dd29f2344bb8f94245658a027e38b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NonbondedMethod</type>
      <name>getNonbondedMethod</name>
      <anchorfile>classOpenMM_1_1AmoebaVdwForce.html</anchorfile>
      <anchor>a39b8aa497b6303d1ceaa0c56311f52a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNonbondedMethod</name>
      <anchorfile>classOpenMM_1_1AmoebaVdwForce.html</anchorfile>
      <anchor>a705d5824b99e09178ec842c46681fe66</anchor>
      <arglist>(NonbondedMethod method)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateParametersInContext</name>
      <anchorfile>classOpenMM_1_1AmoebaVdwForce.html</anchorfile>
      <anchor>abc3002dd21e2e02a9f9dfee170fa3711</anchor>
      <arglist>(Context &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1AmoebaVdwForce.html</anchorfile>
      <anchor>a392efd6ce97bb75e8544b94c94bc08bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1AmoebaVdwForce.html</anchorfile>
      <anchor>ae2504c62b5eed8f5dc13f469d4ed7894</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::AmoebaWcaDispersionForce</name>
    <filename>classOpenMM_1_1AmoebaWcaDispersionForce.html</filename>
    <base>OpenMM::Force</base>
    <member kind="function">
      <type></type>
      <name>AmoebaWcaDispersionForce</name>
      <anchorfile>classOpenMM_1_1AmoebaWcaDispersionForce.html</anchorfile>
      <anchor>a2f6a893d94a9df255a9e1a8e4ab1622b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumParticles</name>
      <anchorfile>classOpenMM_1_1AmoebaWcaDispersionForce.html</anchorfile>
      <anchor>abb6f8d8c14d432090000f19e8beafa99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticleParameters</name>
      <anchorfile>classOpenMM_1_1AmoebaWcaDispersionForce.html</anchorfile>
      <anchor>af5c893033292285d3dd80fb249279519</anchor>
      <arglist>(int particleIndex, double radius, double epsilon)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParticleParameters</name>
      <anchorfile>classOpenMM_1_1AmoebaWcaDispersionForce.html</anchorfile>
      <anchor>a46c35c2348be3d1fbbc2ed63f2d6f469</anchor>
      <arglist>(int particleIndex, double &amp;radius, double &amp;epsilon) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addParticle</name>
      <anchorfile>classOpenMM_1_1AmoebaWcaDispersionForce.html</anchorfile>
      <anchor>a2bad67549d02f2b34f6d5be4cc7122ab</anchor>
      <arglist>(double radius, double epsilon)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateParametersInContext</name>
      <anchorfile>classOpenMM_1_1AmoebaWcaDispersionForce.html</anchorfile>
      <anchor>abc3002dd21e2e02a9f9dfee170fa3711</anchor>
      <arglist>(Context &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEpso</name>
      <anchorfile>classOpenMM_1_1AmoebaWcaDispersionForce.html</anchorfile>
      <anchor>a1beb9cdba7c606e9c21e8c3650f721a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEpsh</name>
      <anchorfile>classOpenMM_1_1AmoebaWcaDispersionForce.html</anchorfile>
      <anchor>a94cf49f6af158273f5112a1a52fd37c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRmino</name>
      <anchorfile>classOpenMM_1_1AmoebaWcaDispersionForce.html</anchorfile>
      <anchor>a649c604fb4267a183071fd769cd00898</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRminh</name>
      <anchorfile>classOpenMM_1_1AmoebaWcaDispersionForce.html</anchorfile>
      <anchor>a97c23a5bd1dd37a995dfb9de41d4cbc1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getAwater</name>
      <anchorfile>classOpenMM_1_1AmoebaWcaDispersionForce.html</anchorfile>
      <anchor>ac8c61c0e653f141b04af6ab0a642f3c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getShctd</name>
      <anchorfile>classOpenMM_1_1AmoebaWcaDispersionForce.html</anchorfile>
      <anchor>a4f7932964f9b6aec97835a396dbd46fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDispoff</name>
      <anchorfile>classOpenMM_1_1AmoebaWcaDispersionForce.html</anchorfile>
      <anchor>a7677d68a692889ab6c56aa212fb7964a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSlevy</name>
      <anchorfile>classOpenMM_1_1AmoebaWcaDispersionForce.html</anchorfile>
      <anchor>a9bdb5558b047d52435e2b917d3e430a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEpso</name>
      <anchorfile>classOpenMM_1_1AmoebaWcaDispersionForce.html</anchorfile>
      <anchor>ab0cf9608001160f73944622d46fe0a64</anchor>
      <arglist>(double inputValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEpsh</name>
      <anchorfile>classOpenMM_1_1AmoebaWcaDispersionForce.html</anchorfile>
      <anchor>a4de28e9ee7880f98d999bc85dd9b1c15</anchor>
      <arglist>(double inputValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRmino</name>
      <anchorfile>classOpenMM_1_1AmoebaWcaDispersionForce.html</anchorfile>
      <anchor>a14adbad503bcd2036e75f5e0ebda1535</anchor>
      <arglist>(double inputValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRminh</name>
      <anchorfile>classOpenMM_1_1AmoebaWcaDispersionForce.html</anchorfile>
      <anchor>abeb736752f516c3d2b1cc7cc618cedc1</anchor>
      <arglist>(double inputValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAwater</name>
      <anchorfile>classOpenMM_1_1AmoebaWcaDispersionForce.html</anchorfile>
      <anchor>aa2532b05fd6d7313e85d136a4ea4eb3b</anchor>
      <arglist>(double inputValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setShctd</name>
      <anchorfile>classOpenMM_1_1AmoebaWcaDispersionForce.html</anchorfile>
      <anchor>aaa29a7ce35e36d914e5ebb8d637dcaa7</anchor>
      <arglist>(double inputValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDispoff</name>
      <anchorfile>classOpenMM_1_1AmoebaWcaDispersionForce.html</anchorfile>
      <anchor>a6d13eda61878a008b213123bd225891f</anchor>
      <arglist>(double inputValue)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSlevy</name>
      <anchorfile>classOpenMM_1_1AmoebaWcaDispersionForce.html</anchorfile>
      <anchor>ac66e55a37b80cba399674ac07cd874e3</anchor>
      <arglist>(double inputValue)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1AmoebaWcaDispersionForce.html</anchorfile>
      <anchor>a392efd6ce97bb75e8544b94c94bc08bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1AmoebaWcaDispersionForce.html</anchorfile>
      <anchor>ae2504c62b5eed8f5dc13f469d4ed7894</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::AndersenThermostat</name>
    <filename>classOpenMM_1_1AndersenThermostat.html</filename>
    <base>OpenMM::Force</base>
    <member kind="function">
      <type></type>
      <name>AndersenThermostat</name>
      <anchorfile>classOpenMM_1_1AndersenThermostat.html</anchorfile>
      <anchor>a7760fc78185b00f86998994e6ae9827b</anchor>
      <arglist>(double defaultTemperature, double defaultCollisionFrequency)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDefaultTemperature</name>
      <anchorfile>classOpenMM_1_1AndersenThermostat.html</anchorfile>
      <anchor>abc2dbd8fb596a88edbc7c8abf6eb2f7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultTemperature</name>
      <anchorfile>classOpenMM_1_1AndersenThermostat.html</anchorfile>
      <anchor>a704c884a1805ad94de4f6cc842063ce5</anchor>
      <arglist>(double temperature)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDefaultCollisionFrequency</name>
      <anchorfile>classOpenMM_1_1AndersenThermostat.html</anchorfile>
      <anchor>a2becbaf4e32051c4ec2d711a7d362774</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultCollisionFrequency</name>
      <anchorfile>classOpenMM_1_1AndersenThermostat.html</anchorfile>
      <anchor>a2db34abb9aee4a08b98cc0998fc40513</anchor>
      <arglist>(double frequency)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRandomNumberSeed</name>
      <anchorfile>classOpenMM_1_1AndersenThermostat.html</anchorfile>
      <anchor>a9f6f1c1064d592c1594696615078e526</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomNumberSeed</name>
      <anchorfile>classOpenMM_1_1AndersenThermostat.html</anchorfile>
      <anchor>a6e57a6072a3913e039c5f2da591d7f96</anchor>
      <arglist>(int seed)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1AndersenThermostat.html</anchorfile>
      <anchor>a392efd6ce97bb75e8544b94c94bc08bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>Temperature</name>
      <anchorfile>classOpenMM_1_1AndersenThermostat.html</anchorfile>
      <anchor>a2d0d57759ab7e29b2308a5f0ee893d68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>CollisionFrequency</name>
      <anchorfile>classOpenMM_1_1AndersenThermostat.html</anchorfile>
      <anchor>aa921ca6657bc6f873b41a8d72ee4496d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1AndersenThermostat.html</anchorfile>
      <anchor>ae2504c62b5eed8f5dc13f469d4ed7894</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::BrownianIntegrator</name>
    <filename>classOpenMM_1_1BrownianIntegrator.html</filename>
    <base>OpenMM::Integrator</base>
    <member kind="function">
      <type></type>
      <name>BrownianIntegrator</name>
      <anchorfile>classOpenMM_1_1BrownianIntegrator.html</anchorfile>
      <anchor>a3d91501858604f62b4eb8c1ef5ab0753</anchor>
      <arglist>(double temperature, double frictionCoeff, double stepSize)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTemperature</name>
      <anchorfile>classOpenMM_1_1BrownianIntegrator.html</anchorfile>
      <anchor>a00d75976e31278340ed5550e9f1479da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTemperature</name>
      <anchorfile>classOpenMM_1_1BrownianIntegrator.html</anchorfile>
      <anchor>a0eaab969662d838cfb0528a4e5cf7e13</anchor>
      <arglist>(double temp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFriction</name>
      <anchorfile>classOpenMM_1_1BrownianIntegrator.html</anchorfile>
      <anchor>aeef3b48c4eab3044c61869b3a521f32f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFriction</name>
      <anchorfile>classOpenMM_1_1BrownianIntegrator.html</anchorfile>
      <anchor>a68359308309527032c014d7151ac69c9</anchor>
      <arglist>(double coeff)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRandomNumberSeed</name>
      <anchorfile>classOpenMM_1_1BrownianIntegrator.html</anchorfile>
      <anchor>a9f6f1c1064d592c1594696615078e526</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomNumberSeed</name>
      <anchorfile>classOpenMM_1_1BrownianIntegrator.html</anchorfile>
      <anchor>a6e57a6072a3913e039c5f2da591d7f96</anchor>
      <arglist>(int seed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classOpenMM_1_1BrownianIntegrator.html</anchorfile>
      <anchor>a670ab49c98d37df4ffdd814ff6428fc8</anchor>
      <arglist>(int steps)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Integrator</name>
      <anchorfile>classOpenMM_1_1Integrator.html</anchorfile>
      <anchor>a47ae0ee235d7bbc752c2da101751a9b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Integrator</name>
      <anchorfile>classOpenMM_1_1Integrator.html</anchorfile>
      <anchor>ac13ff1f4b36510ac4bcd076d4c1773ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getStepSize</name>
      <anchorfile>classOpenMM_1_1Integrator.html</anchorfile>
      <anchor>a65c3266b2f624486c8135a4bb3574886</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStepSize</name>
      <anchorfile>classOpenMM_1_1Integrator.html</anchorfile>
      <anchor>aa89401f4909b94423a6dc01888d8cec2</anchor>
      <arglist>(double size)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getConstraintTolerance</name>
      <anchorfile>classOpenMM_1_1Integrator.html</anchorfile>
      <anchor>a76f57a9f127f12bb12b2842250b25eb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConstraintTolerance</name>
      <anchorfile>classOpenMM_1_1Integrator.html</anchorfile>
      <anchor>a93f89409cfa7f3b7a3092c145ee8c4fa</anchor>
      <arglist>(double tol)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1BrownianIntegrator.html</anchorfile>
      <anchor>a941fcc46a4e6e1fed160f03aa6cb04a5</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cleanup</name>
      <anchorfile>classOpenMM_1_1BrownianIntegrator.html</anchorfile>
      <anchor>a4b66d5e31b5dc18b314c8a68163263bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1BrownianIntegrator.html</anchorfile>
      <anchor>a227682eb0bbe611b36bb6903e4569af0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>computeKineticEnergy</name>
      <anchorfile>classOpenMM_1_1BrownianIntegrator.html</anchorfile>
      <anchor>a34f4fe071710d31af9ea6bfa44c66a84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>stateChanged</name>
      <anchorfile>classOpenMM_1_1Integrator.html</anchorfile>
      <anchor>a4398cf1e763c068e4801b2d6dae9d0ad</anchor>
      <arglist>(State::DataType changed)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ContextImpl *</type>
      <name>context</name>
      <anchorfile>classOpenMM_1_1Integrator.html</anchorfile>
      <anchor>ac92d183b8e1ea8141f12a75516ab6b2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Context *</type>
      <name>owner</name>
      <anchorfile>classOpenMM_1_1Integrator.html</anchorfile>
      <anchor>aeda7ffdd6e90dd41f42e6de09c7efac8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::CMAPTorsionForce</name>
    <filename>classOpenMM_1_1CMAPTorsionForce.html</filename>
    <base>OpenMM::Force</base>
    <member kind="function">
      <type></type>
      <name>CMAPTorsionForce</name>
      <anchorfile>classOpenMM_1_1CMAPTorsionForce.html</anchorfile>
      <anchor>a38bc8be6c3b4b98d0be84316a4fb379b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumMaps</name>
      <anchorfile>classOpenMM_1_1CMAPTorsionForce.html</anchorfile>
      <anchor>aaa371caaa849f232008ff9c33bd0bf8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTorsions</name>
      <anchorfile>classOpenMM_1_1CMAPTorsionForce.html</anchorfile>
      <anchor>a3bb8e6820ac5baede1973c6bb1fd99aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addMap</name>
      <anchorfile>classOpenMM_1_1CMAPTorsionForce.html</anchorfile>
      <anchor>aa5454cecb15beed606ff4a2451a555ce</anchor>
      <arglist>(int size, const std::vector&lt; double &gt; &amp;energy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getMapParameters</name>
      <anchorfile>classOpenMM_1_1CMAPTorsionForce.html</anchorfile>
      <anchor>a40f6573e6a89d223917d60a9cb475e3c</anchor>
      <arglist>(int index, int &amp;size, std::vector&lt; double &gt; &amp;energy) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMapParameters</name>
      <anchorfile>classOpenMM_1_1CMAPTorsionForce.html</anchorfile>
      <anchor>a120645991253aafe9fb37e29c5fb403c</anchor>
      <arglist>(int index, int size, const std::vector&lt; double &gt; &amp;energy)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addTorsion</name>
      <anchorfile>classOpenMM_1_1CMAPTorsionForce.html</anchorfile>
      <anchor>a8ec5147600cb1eeb3b65a15801dc641e</anchor>
      <arglist>(int map, int a1, int a2, int a3, int a4, int b1, int b2, int b3, int b4)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTorsionParameters</name>
      <anchorfile>classOpenMM_1_1CMAPTorsionForce.html</anchorfile>
      <anchor>a8132da7c1b5261dbd373541d4bc8f9e6</anchor>
      <arglist>(int index, int &amp;map, int &amp;a1, int &amp;a2, int &amp;a3, int &amp;a4, int &amp;b1, int &amp;b2, int &amp;b3, int &amp;b4) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTorsionParameters</name>
      <anchorfile>classOpenMM_1_1CMAPTorsionForce.html</anchorfile>
      <anchor>ac0261668a093356fd78c1150b58ed99e</anchor>
      <arglist>(int index, int map, int a1, int a2, int a3, int a4, int b1, int b2, int b3, int b4)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateParametersInContext</name>
      <anchorfile>classOpenMM_1_1CMAPTorsionForce.html</anchorfile>
      <anchor>abc3002dd21e2e02a9f9dfee170fa3711</anchor>
      <arglist>(Context &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1CMAPTorsionForce.html</anchorfile>
      <anchor>a392efd6ce97bb75e8544b94c94bc08bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1CMAPTorsionForce.html</anchorfile>
      <anchor>ae2504c62b5eed8f5dc13f469d4ed7894</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::CMMotionRemover</name>
    <filename>classOpenMM_1_1CMMotionRemover.html</filename>
    <base>OpenMM::Force</base>
    <member kind="function">
      <type></type>
      <name>CMMotionRemover</name>
      <anchorfile>classOpenMM_1_1CMMotionRemover.html</anchorfile>
      <anchor>af5b3eb45ff23d8ae838c19e469298105</anchor>
      <arglist>(int frequency=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFrequency</name>
      <anchorfile>classOpenMM_1_1CMMotionRemover.html</anchorfile>
      <anchor>af2c1e36972f8bac2b133e9148b51b268</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrequency</name>
      <anchorfile>classOpenMM_1_1CMMotionRemover.html</anchorfile>
      <anchor>ae2dd14a3c0cfc0376dbac59c2d7e56b7</anchor>
      <arglist>(int freq)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1CMMotionRemover.html</anchorfile>
      <anchor>a392efd6ce97bb75e8544b94c94bc08bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1CMMotionRemover.html</anchorfile>
      <anchor>ae2504c62b5eed8f5dc13f469d4ed7894</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::Context</name>
    <filename>classOpenMM_1_1Context.html</filename>
    <member kind="function">
      <type></type>
      <name>Context</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>a983ff1dcdb09fe4ea0f55dd03bbf2a49</anchor>
      <arglist>(const System &amp;system, Integrator &amp;integrator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Context</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>a2965f54ee537735998d9eadace3d059e</anchor>
      <arglist>(const System &amp;system, Integrator &amp;integrator, Platform &amp;platform)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Context</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>a4db0294dff5da0888dda808832069be0</anchor>
      <arglist>(const System &amp;system, Integrator &amp;integrator, Platform &amp;platform, const std::map&lt; std::string, std::string &gt; &amp;properties)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Context</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>ad2cdbdf8ca6efd618beb4f0c416e02f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const System &amp;</type>
      <name>getSystem</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>ab4a333d9a9e9041f8c823412d6c90d17</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Integrator &amp;</type>
      <name>getIntegrator</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>a984898203c574451926774580139721f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Integrator &amp;</type>
      <name>getIntegrator</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>a7dc958887b803bb56cd249eb7a12dd22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Platform &amp;</type>
      <name>getPlatform</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>ad5ee56553b2e21cd22fa317b37e68770</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Platform &amp;</type>
      <name>getPlatform</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>ac8e8a60a031c2b4110a221b4e7a96ed9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>getState</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>a5c53803407b6c22454813f668c42a33e</anchor>
      <arglist>(int types, bool enforcePeriodicBox=false, int groups=0xFFFFFFFF) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>aaabc9b6d683c06d3a9d06639840ab564</anchor>
      <arglist>(const State &amp;state)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTime</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>a57f151321d0f67de82e737e24428362c</anchor>
      <arglist>(double time)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPositions</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>a039cca95cb781d471d4f07936e2e6488</anchor>
      <arglist>(const std::vector&lt; Vec3 &gt; &amp;positions)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVelocities</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>a040f8ddbc2378ccc6f07ac2a60dd22c3</anchor>
      <arglist>(const std::vector&lt; Vec3 &gt; &amp;velocities)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVelocitiesToTemperature</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>a447ae91ba1437957f5d9549d8e967ef6</anchor>
      <arglist>(double temperature, int randomSeed=osrngseed())</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getParameter</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>adeef8d4a24e1db629e16b3c87b71319f</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameter</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>a7756dadc9203b3bb4d76ee3e098af709</anchor>
      <arglist>(const std::string &amp;name, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPeriodicBoxVectors</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>a62fcc50a2c34ff28de9667aabf5ec33f</anchor>
      <arglist>(const Vec3 &amp;a, const Vec3 &amp;b, const Vec3 &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyConstraints</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>a74282a7e0e2186059e160cde26a0e2a2</anchor>
      <arglist>(double tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyVelocityConstraints</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>aa5b8831ccf2d8c9bdea50a9ca8a85a77</anchor>
      <arglist>(double tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeVirtualSites</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>a07a7e8dbbbcec2dd45939d6483f10b5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reinitialize</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>ad9882f00bb27345adbf4a46a7ac4124e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createCheckpoint</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>a56f094cd7984f9938a951fd74bf10f16</anchor>
      <arglist>(std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadCheckpoint</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>ac58bb6d1900faa9800171d00bf50266c</anchor>
      <arglist>(std::istream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::vector&lt; int &gt; &gt; &amp;</type>
      <name>getMolecules</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>aff306ec24eadf3c1c504515af394dba5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Force</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>af8c938c866ec933ad058da546558883a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Platform</name>
      <anchorfile>classOpenMM_1_1Context.html</anchorfile>
      <anchor>a9def841f7cd75057805532dab4d0f459</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::Continuous1DFunction</name>
    <filename>classOpenMM_1_1Continuous1DFunction.html</filename>
    <base>OpenMM::TabulatedFunction</base>
    <member kind="function">
      <type></type>
      <name>Continuous1DFunction</name>
      <anchorfile>classOpenMM_1_1Continuous1DFunction.html</anchorfile>
      <anchor>aed417a127d0507ef393f4379e1ba82a7</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;values, double min, double max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFunctionParameters</name>
      <anchorfile>classOpenMM_1_1Continuous1DFunction.html</anchorfile>
      <anchor>acb7e5321aa701bde29006989514c124b</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;values, double &amp;min, double &amp;max) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFunctionParameters</name>
      <anchorfile>classOpenMM_1_1Continuous1DFunction.html</anchorfile>
      <anchor>a39ce0a417ef2aef1e54024284d0eb894</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;values, double min, double max)</arglist>
    </member>
    <member kind="function">
      <type>Continuous1DFunction *</type>
      <name>Copy</name>
      <anchorfile>classOpenMM_1_1Continuous1DFunction.html</anchorfile>
      <anchor>a2a6d2b215ff0e82055531fe686391f0b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~TabulatedFunction</name>
      <anchorfile>classOpenMM_1_1TabulatedFunction.html</anchorfile>
      <anchor>ae305ff88aff64399cefece57f0eb70f5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::Continuous2DFunction</name>
    <filename>classOpenMM_1_1Continuous2DFunction.html</filename>
    <base>OpenMM::TabulatedFunction</base>
    <member kind="function">
      <type></type>
      <name>Continuous2DFunction</name>
      <anchorfile>classOpenMM_1_1Continuous2DFunction.html</anchorfile>
      <anchor>abca7c26ff5a65576f7ed90f22717f58a</anchor>
      <arglist>(int xsize, int ysize, const std::vector&lt; double &gt; &amp;values, double xmin, double xmax, double ymin, double ymax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFunctionParameters</name>
      <anchorfile>classOpenMM_1_1Continuous2DFunction.html</anchorfile>
      <anchor>a88d0a127a2c08633f435e24eb68de294</anchor>
      <arglist>(int &amp;xsize, int &amp;ysize, std::vector&lt; double &gt; &amp;values, double &amp;xmin, double &amp;xmax, double &amp;ymin, double &amp;ymax) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFunctionParameters</name>
      <anchorfile>classOpenMM_1_1Continuous2DFunction.html</anchorfile>
      <anchor>a2b1c99e1de20a9a8c404fcd7dd0d76ba</anchor>
      <arglist>(int xsize, int ysize, const std::vector&lt; double &gt; &amp;values, double xmin, double xmax, double ymin, double ymax)</arglist>
    </member>
    <member kind="function">
      <type>Continuous2DFunction *</type>
      <name>Copy</name>
      <anchorfile>classOpenMM_1_1Continuous2DFunction.html</anchorfile>
      <anchor>a41b97523d7157b6561baa8e075bb6de5</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::Continuous3DFunction</name>
    <filename>classOpenMM_1_1Continuous3DFunction.html</filename>
    <base>OpenMM::TabulatedFunction</base>
    <member kind="function">
      <type></type>
      <name>Continuous3DFunction</name>
      <anchorfile>classOpenMM_1_1Continuous3DFunction.html</anchorfile>
      <anchor>afe359a1ac4350a2a8cf6b5e34a0be6b6</anchor>
      <arglist>(int xsize, int ysize, int zsize, const std::vector&lt; double &gt; &amp;values, double xmin, double xmax, double ymin, double ymax, double zmin, double zmax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFunctionParameters</name>
      <anchorfile>classOpenMM_1_1Continuous3DFunction.html</anchorfile>
      <anchor>a32012b2dc77b0279fb62fa10d8bb4661</anchor>
      <arglist>(int &amp;xsize, int &amp;ysize, int &amp;zsize, std::vector&lt; double &gt; &amp;values, double &amp;xmin, double &amp;xmax, double &amp;ymin, double &amp;ymax, double &amp;zmin, double &amp;zmax) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFunctionParameters</name>
      <anchorfile>classOpenMM_1_1Continuous3DFunction.html</anchorfile>
      <anchor>ab89dd291253ef2cca9dffde8ac7c4477</anchor>
      <arglist>(int xsize, int ysize, int zsize, const std::vector&lt; double &gt; &amp;values, double xmin, double xmax, double ymin, double ymax, double zmin, double zmax)</arglist>
    </member>
    <member kind="function">
      <type>Continuous3DFunction *</type>
      <name>Copy</name>
      <anchorfile>classOpenMM_1_1Continuous3DFunction.html</anchorfile>
      <anchor>a2d0189baf13c039bf87d095a62c44c9c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::CustomAngleForce</name>
    <filename>classOpenMM_1_1CustomAngleForce.html</filename>
    <base>OpenMM::Force</base>
    <member kind="function">
      <type></type>
      <name>CustomAngleForce</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>a716cf2703a075f495d3d9a10eeb935fe</anchor>
      <arglist>(const std::string &amp;energy)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumAngles</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>a6d6db7820f5284ccd108921214a49502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPerAngleParameters</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>a87a82b1a86a5239eeeeb28467429d455</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumGlobalParameters</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>a25c123d3f1927dfb1a970548b747e1ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getEnergyFunction</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>aa9960dbb3bed2cb64315eff6392eea31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnergyFunction</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>a6b0c9ff70939ed71a202f955dc18ff31</anchor>
      <arglist>(const std::string &amp;energy)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addPerAngleParameter</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>a6a3812889e3da7512bd6f5c2384eba1f</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPerAngleParameterName</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>a572696de060df64da7a860d540fe2783</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPerAngleParameterName</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>a3356707183c8b96e6a07d5c35c253328</anchor>
      <arglist>(int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addGlobalParameter</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>a6560d40a40578ddaf8b5e4a19e373020</anchor>
      <arglist>(const std::string &amp;name, double defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getGlobalParameterName</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>a0dcb0e90bae7a35c1bc8196bb47eb3b7</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalParameterName</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>a8eacbbd8c5aafb3c565ff9628f14e69b</anchor>
      <arglist>(int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGlobalParameterDefaultValue</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>a03e5d3d717bac0e2e31a8bb9065ea508</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalParameterDefaultValue</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>a905fad6be1a06a749b6f04aabe42f481</anchor>
      <arglist>(int index, double defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAngle</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>a50221318dc46d1ad4a6e6d1e54151541</anchor>
      <arglist>(int particle1, int particle2, int particle3, const std::vector&lt; double &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAngleParameters</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>ad2fbfca012013a6f8af0dffe5ac7c9da</anchor>
      <arglist>(int index, int &amp;particle1, int &amp;particle2, int &amp;particle3, std::vector&lt; double &gt; &amp;parameters) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngleParameters</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>af57c16d1f2521334f6c61373391719a2</anchor>
      <arglist>(int index, int particle1, int particle2, int particle3, const std::vector&lt; double &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateParametersInContext</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>abc3002dd21e2e02a9f9dfee170fa3711</anchor>
      <arglist>(Context &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>a392efd6ce97bb75e8544b94c94bc08bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1CustomAngleForce.html</anchorfile>
      <anchor>ae2504c62b5eed8f5dc13f469d4ed7894</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::CustomBondForce</name>
    <filename>classOpenMM_1_1CustomBondForce.html</filename>
    <base>OpenMM::Force</base>
    <member kind="function">
      <type></type>
      <name>CustomBondForce</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>a9d42e99ad10fc44ddcb68e2ee8812c0c</anchor>
      <arglist>(const std::string &amp;energy)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBonds</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>a16f41cfeb5ee7f6163d00a230a031bcd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPerBondParameters</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>a75e6c34861c09942e4dbb1267db901cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumGlobalParameters</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>a25c123d3f1927dfb1a970548b747e1ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getEnergyFunction</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>aa9960dbb3bed2cb64315eff6392eea31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnergyFunction</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>a6b0c9ff70939ed71a202f955dc18ff31</anchor>
      <arglist>(const std::string &amp;energy)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addPerBondParameter</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>a3fea7c134115e370a2fae30a2149b038</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPerBondParameterName</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>a0ceeb52a89148d1c4b0293e91ce4574c</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPerBondParameterName</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>abc721748a1f73b7c5cf600d1e0b46dd2</anchor>
      <arglist>(int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addGlobalParameter</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>a6560d40a40578ddaf8b5e4a19e373020</anchor>
      <arglist>(const std::string &amp;name, double defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getGlobalParameterName</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>a0dcb0e90bae7a35c1bc8196bb47eb3b7</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalParameterName</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>a8eacbbd8c5aafb3c565ff9628f14e69b</anchor>
      <arglist>(int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGlobalParameterDefaultValue</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>a03e5d3d717bac0e2e31a8bb9065ea508</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalParameterDefaultValue</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>a905fad6be1a06a749b6f04aabe42f481</anchor>
      <arglist>(int index, double defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addBond</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>ad90c63eaa3e85f2b09a8a83af271ac0c</anchor>
      <arglist>(int particle1, int particle2, const std::vector&lt; double &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBondParameters</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>a68bdcca328ec43f93ffd0379b99e71c4</anchor>
      <arglist>(int index, int &amp;particle1, int &amp;particle2, std::vector&lt; double &gt; &amp;parameters) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBondParameters</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>aa563965856e91d3eaabcf115cdb9d4fe</anchor>
      <arglist>(int index, int particle1, int particle2, const std::vector&lt; double &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateParametersInContext</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>abc3002dd21e2e02a9f9dfee170fa3711</anchor>
      <arglist>(Context &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>a392efd6ce97bb75e8544b94c94bc08bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1CustomBondForce.html</anchorfile>
      <anchor>ae2504c62b5eed8f5dc13f469d4ed7894</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::CustomCompoundBondForce</name>
    <filename>classOpenMM_1_1CustomCompoundBondForce.html</filename>
    <base>OpenMM::Force</base>
    <member kind="function">
      <type></type>
      <name>CustomCompoundBondForce</name>
      <anchorfile>classOpenMM_1_1CustomCompoundBondForce.html</anchorfile>
      <anchor>a06ecf608751ecd832f136f3197229ce6</anchor>
      <arglist>(int numParticles, const std::string &amp;energy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CustomCompoundBondForce</name>
      <anchorfile>classOpenMM_1_1CustomCompoundBondForce.html</anchorfile>
      <anchor>a82a2f804c98704c1a11ba362c0cfde1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumParticlesPerBond</name>
      <anchorfile>classOpenMM_1_1CustomCompoundBondForce.html</anchorfile>
      <anchor>a0b0750682eed77ed451d9f43c9841d8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBonds</name>
      <anchorfile>classOpenMM_1_1CustomCompoundBondForce.html</anchorfile>
      <anchor>a16f41cfeb5ee7f6163d00a230a031bcd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPerBondParameters</name>
      <anchorfile>classOpenMM_1_1CustomCompoundBondForce.html</anchorfile>
      <anchor>a75e6c34861c09942e4dbb1267db901cf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumGlobalParameters</name>
      <anchorfile>classOpenMM_1_1CustomCompoundBondForce.html</anchorfile>
      <anchor>a25c123d3f1927dfb1a970548b747e1ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTabulatedFunctions</name>
      <anchorfile>classOpenMM_1_1CustomCompoundBondForce.html</anchorfile>
      <anchor>a900b6c7908cf9696a255012c6647355f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumFunctions</name>
      <anchorfile>classOpenMM_1_1CustomCompoundBondForce.html</anchorfile>
      <anchor>a294b43c63902a615fe3c3db8b5aa0340</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getEnergyFunction</name>
      <anchorfile>classOpenMM_1_1CustomCompoundBondForce.html</anchorfile>
      <anchor>aa9960dbb3bed2cb64315eff6392eea31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnergyFunction</name>
      <anchorfile>classOpenMM_1_1CustomCompoundBondForce.html</anchorfile>
      <anchor>a6b0c9ff70939ed71a202f955dc18ff31</anchor>
      <arglist>(const std::string &amp;energy)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addPerBondParameter</name>
      <anchorfile>classOpenMM_1_1CustomCompoundBondForce.html</anchorfile>
      <anchor>a3fea7c134115e370a2fae30a2149b038</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPerBondParameterName</name>
      <anchorfile>classOpenMM_1_1CustomCompoundBondForce.html</anchorfile>
      <anchor>a0ceeb52a89148d1c4b0293e91ce4574c</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPerBondParameterName</name>
      <anchorfile>classOpenMM_1_1CustomCompoundBondForce.html</anchorfile>
      <anchor>abc721748a1f73b7c5cf600d1e0b46dd2</anchor>
      <arglist>(int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addGlobalParameter</name>
      <anchorfile>classOpenMM_1_1CustomCompoundBondForce.html</anchorfile>
      <anchor>a6560d40a40578ddaf8b5e4a19e373020</anchor>
      <arglist>(const std::string &amp;name, double defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getGlobalParameterName</name>
      <anchorfile>classOpenMM_1_1CustomCompoundBondForce.html</anchorfile>
      <anchor>a0dcb0e90bae7a35c1bc8196bb47eb3b7</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalParameterName</name>
      <anchorfile>classOpenMM_1_1CustomCompoundBondForce.html</anchorfile>
      <anchor>a8eacbbd8c5aafb3c565ff9628f14e69b</anchor>
      <arglist>(int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGlobalParameterDefaultValue</name>
      <anchorfile>classOpenMM_1_1CustomCompoundBondForce.html</anchorfile>
      <anchor>a03e5d3d717bac0e2e31a8bb9065ea508</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalParameterDefaultValue</name>
      <anchorfile>classOpenMM_1_1CustomCompoundBondForce.html</anchorfile>
      <anchor>a905fad6be1a06a749b6f04aabe42f481</anchor>
      <arglist>(int index, double defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addBond</name>
      <anchorfile>classOpenMM_1_1CustomCompoundBondForce.html</anchorfile>
      <anchor>a31830b051a35ed342717163853d0484a</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;particles, const std::vector&lt; double &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBondParameters</name>
      <anchorfile>classOpenMM_1_1CustomCompoundBondForce.html</anchorfile>
      <anchor>a568dfb3e868cad842e653a44fc9b21b4</anchor>
      <arglist>(int index, std::vector&lt; int &gt; &amp;particles, std::vector&lt; double &gt; &amp;parameters) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBondParameters</name>
      <anchorfile>classOpenMM_1_1CustomCompoundBondForce.html</anchorfile>
      <anchor>acb33740ce7b7eed515d05f91fce7f18d</anchor>
      <arglist>(int index, const std::vector&lt; int &gt; &amp;particles, const std::vector&lt; double &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addTabulatedFunction</name>
      <anchorfile>classOpenMM_1_1CustomCompoundBondForce.html</anchorfile>
      <anchor>a56f0394db6932b41fec69631d57898e8</anchor>
      <arglist>(const std::string &amp;name, TabulatedFunction *function)</arglist>
    </member>
    <member kind="function">
      <type>const TabulatedFunction &amp;</type>
      <name>getTabulatedFunction</name>
      <anchorfile>classOpenMM_1_1CustomCompoundBondForce.html</anchorfile>
      <anchor>aca565c9aac26410e9d0c784c452318f1</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>TabulatedFunction &amp;</type>
      <name>getTabulatedFunction</name>
      <anchorfile>classOpenMM_1_1CustomCompoundBondForce.html</anchorfile>
      <anchor>a5368b723c01993a3e393ed86c17c5150</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTabulatedFunctionName</name>
      <anchorfile>classOpenMM_1_1CustomCompoundBondForce.html</anchorfile>
      <anchor>a02287a6bdc8b248e3aa6b1ca9f4fefd2</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addFunction</name>
      <anchorfile>classOpenMM_1_1CustomCompoundBondForce.html</anchorfile>
      <anchor>afcc97644875aeb16148a8d53adbfea36</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; double &gt; &amp;values, double min, double max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFunctionParameters</name>
      <anchorfile>classOpenMM_1_1CustomCompoundBondForce.html</anchorfile>
      <anchor>a71ccd77e7d00990e8e02554ec3f05447</anchor>
      <arglist>(int index, std::string &amp;name, std::vector&lt; double &gt; &amp;values, double &amp;min, double &amp;max) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFunctionParameters</name>
      <anchorfile>classOpenMM_1_1CustomCompoundBondForce.html</anchorfile>
      <anchor>a49c505e0098204ecb4d372286e157b0c</anchor>
      <arglist>(int index, const std::string &amp;name, const std::vector&lt; double &gt; &amp;values, double min, double max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateParametersInContext</name>
      <anchorfile>classOpenMM_1_1CustomCompoundBondForce.html</anchorfile>
      <anchor>abc3002dd21e2e02a9f9dfee170fa3711</anchor>
      <arglist>(Context &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1CustomCompoundBondForce.html</anchorfile>
      <anchor>a392efd6ce97bb75e8544b94c94bc08bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1CustomCompoundBondForce.html</anchorfile>
      <anchor>ae2504c62b5eed8f5dc13f469d4ed7894</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::CustomExternalForce</name>
    <filename>classOpenMM_1_1CustomExternalForce.html</filename>
    <base>OpenMM::Force</base>
    <member kind="function">
      <type></type>
      <name>CustomExternalForce</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>acf14ada3f55e79c9b50a1e3223a87ceb</anchor>
      <arglist>(const std::string &amp;energy)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumParticles</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>abb6f8d8c14d432090000f19e8beafa99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPerParticleParameters</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>acd9ffeb359356701529a7ffe77694021</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumGlobalParameters</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>a25c123d3f1927dfb1a970548b747e1ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getEnergyFunction</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>aa9960dbb3bed2cb64315eff6392eea31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnergyFunction</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>a6b0c9ff70939ed71a202f955dc18ff31</anchor>
      <arglist>(const std::string &amp;energy)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addPerParticleParameter</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>a98c86338def0655742c4b0ddb25a219c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPerParticleParameterName</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>a1ac69476629bb277266c55d3317045d0</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPerParticleParameterName</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>a4bbd3cacdb6f0cfdb20bfb553f3a80ab</anchor>
      <arglist>(int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addGlobalParameter</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>a6560d40a40578ddaf8b5e4a19e373020</anchor>
      <arglist>(const std::string &amp;name, double defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getGlobalParameterName</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>a0dcb0e90bae7a35c1bc8196bb47eb3b7</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalParameterName</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>a8eacbbd8c5aafb3c565ff9628f14e69b</anchor>
      <arglist>(int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGlobalParameterDefaultValue</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>a03e5d3d717bac0e2e31a8bb9065ea508</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalParameterDefaultValue</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>a905fad6be1a06a749b6f04aabe42f481</anchor>
      <arglist>(int index, double defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addParticle</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>ae2c0111a9dd699fa294ae500c5cfad93</anchor>
      <arglist>(int particle, const std::vector&lt; double &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParticleParameters</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>a70fd1c1edfe4cb40cfd93d829a84e187</anchor>
      <arglist>(int index, int &amp;particle, std::vector&lt; double &gt; &amp;parameters) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticleParameters</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>a735c4d683336921811d2568620a011c4</anchor>
      <arglist>(int index, int particle, const std::vector&lt; double &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateParametersInContext</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>abc3002dd21e2e02a9f9dfee170fa3711</anchor>
      <arglist>(Context &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>a392efd6ce97bb75e8544b94c94bc08bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1CustomExternalForce.html</anchorfile>
      <anchor>ae2504c62b5eed8f5dc13f469d4ed7894</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::CustomGBForce</name>
    <filename>classOpenMM_1_1CustomGBForce.html</filename>
    <base>OpenMM::Force</base>
    <member kind="enumeration">
      <type></type>
      <name>NonbondedMethod</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NoCutoff</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390a007d65056b9c2fce5e5549b28e4e2ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CutoffNonPeriodic</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390aa2e57a56c2293e046b2fa2231d6f3d6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CutoffPeriodic</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390a168a54330e90997ff68501baaaa41ccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ComputationType</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>aea586424fa2a5ad53befcfd05e06660a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SingleParticle</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>aea586424fa2a5ad53befcfd05e06660aa10c4f65e13e406d484cda87337400346</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ParticlePair</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>aea586424fa2a5ad53befcfd05e06660aab1f57b1df66f12881f5d4dfe052c5d6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ParticlePairNoExclusions</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>aea586424fa2a5ad53befcfd05e06660aa120c5bf64d4c0368cc2af4217dbfa70b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CustomGBForce</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a8285194c5ee55c9c1dd2bde7794a4395</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CustomGBForce</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a5471ab02be0cc83fbef5386d273770d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumParticles</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>abb6f8d8c14d432090000f19e8beafa99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumExclusions</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a815d2155ffc24688998dab86cc283849</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPerParticleParameters</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>acd9ffeb359356701529a7ffe77694021</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumGlobalParameters</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a25c123d3f1927dfb1a970548b747e1ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTabulatedFunctions</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a900b6c7908cf9696a255012c6647355f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumFunctions</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a294b43c63902a615fe3c3db8b5aa0340</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumComputedValues</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>aae3dead7efc045383e37c6dc3ed0a4d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumEnergyTerms</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a14657cd2615feabc0b39b9cfbfcda4b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NonbondedMethod</type>
      <name>getNonbondedMethod</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a39b8aa497b6303d1ceaa0c56311f52a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNonbondedMethod</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a705d5824b99e09178ec842c46681fe66</anchor>
      <arglist>(NonbondedMethod method)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCutoffDistance</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a5ed4b7977b5b798d0119735dc2a2add6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCutoffDistance</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>aca0f3cbeec7aac67e140f0ed2f67b526</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addPerParticleParameter</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a98c86338def0655742c4b0ddb25a219c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPerParticleParameterName</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a1ac69476629bb277266c55d3317045d0</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPerParticleParameterName</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a4bbd3cacdb6f0cfdb20bfb553f3a80ab</anchor>
      <arglist>(int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addGlobalParameter</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a6560d40a40578ddaf8b5e4a19e373020</anchor>
      <arglist>(const std::string &amp;name, double defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getGlobalParameterName</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a0dcb0e90bae7a35c1bc8196bb47eb3b7</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalParameterName</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a8eacbbd8c5aafb3c565ff9628f14e69b</anchor>
      <arglist>(int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGlobalParameterDefaultValue</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a03e5d3d717bac0e2e31a8bb9065ea508</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalParameterDefaultValue</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a905fad6be1a06a749b6f04aabe42f481</anchor>
      <arglist>(int index, double defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addParticle</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>adf422a3ebd416157d0d18fbcabba50ce</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParticleParameters</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a699b6427b68d93a528e19e4ab025b874</anchor>
      <arglist>(int index, std::vector&lt; double &gt; &amp;parameters) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticleParameters</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a03a5de5245b1dc884cf6b050b1dc49df</anchor>
      <arglist>(int index, const std::vector&lt; double &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addComputedValue</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a476a8718b1b4e4c2e4e4a004afe4caa9</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;expression, ComputationType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getComputedValueParameters</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>ae977d05ef3848bd68c2701ada27a2b1d</anchor>
      <arglist>(int index, std::string &amp;name, std::string &amp;expression, ComputationType &amp;type) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComputedValueParameters</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a751be9b7081db5c4cd22448df8d3afa5</anchor>
      <arglist>(int index, const std::string &amp;name, const std::string &amp;expression, ComputationType type)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addEnergyTerm</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a64ae3cbb0d504e5d20787a1b95ceacec</anchor>
      <arglist>(const std::string &amp;expression, ComputationType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getEnergyTermParameters</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a8fed5741a660cc2eaf10abe8e3c2a2ad</anchor>
      <arglist>(int index, std::string &amp;expression, ComputationType &amp;type) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnergyTermParameters</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a5cc725c855b1dccc498ec3321798c260</anchor>
      <arglist>(int index, const std::string &amp;expression, ComputationType type)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addExclusion</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>ad890e952620cae8e616ccb18eb63737a</anchor>
      <arglist>(int particle1, int particle2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getExclusionParticles</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>aa4f165c0eec62dae9936e5330722f559</anchor>
      <arglist>(int index, int &amp;particle1, int &amp;particle2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExclusionParticles</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a53bbf77cadbd74abd8b6e9acdb85c0dd</anchor>
      <arglist>(int index, int particle1, int particle2)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addTabulatedFunction</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a56f0394db6932b41fec69631d57898e8</anchor>
      <arglist>(const std::string &amp;name, TabulatedFunction *function)</arglist>
    </member>
    <member kind="function">
      <type>const TabulatedFunction &amp;</type>
      <name>getTabulatedFunction</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>aca565c9aac26410e9d0c784c452318f1</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>TabulatedFunction &amp;</type>
      <name>getTabulatedFunction</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a5368b723c01993a3e393ed86c17c5150</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTabulatedFunctionName</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a02287a6bdc8b248e3aa6b1ca9f4fefd2</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addFunction</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>afcc97644875aeb16148a8d53adbfea36</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; double &gt; &amp;values, double min, double max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFunctionParameters</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a71ccd77e7d00990e8e02554ec3f05447</anchor>
      <arglist>(int index, std::string &amp;name, std::vector&lt; double &gt; &amp;values, double &amp;min, double &amp;max) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFunctionParameters</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a49c505e0098204ecb4d372286e157b0c</anchor>
      <arglist>(int index, const std::string &amp;name, const std::vector&lt; double &gt; &amp;values, double min, double max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateParametersInContext</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>abc3002dd21e2e02a9f9dfee170fa3711</anchor>
      <arglist>(Context &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>a392efd6ce97bb75e8544b94c94bc08bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1CustomGBForce.html</anchorfile>
      <anchor>ae2504c62b5eed8f5dc13f469d4ed7894</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::CustomHbondForce</name>
    <filename>classOpenMM_1_1CustomHbondForce.html</filename>
    <base>OpenMM::Force</base>
    <member kind="enumeration">
      <type></type>
      <name>NonbondedMethod</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NoCutoff</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390a007d65056b9c2fce5e5549b28e4e2ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CutoffNonPeriodic</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390aa2e57a56c2293e046b2fa2231d6f3d6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CutoffPeriodic</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390a168a54330e90997ff68501baaaa41ccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CustomHbondForce</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a68ae0ae31b3ad0fbca7c01249a2ecf41</anchor>
      <arglist>(const std::string &amp;energy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CustomHbondForce</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a369a6b208c7f50cb0d725a8fd7d6c0be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumDonors</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>ae09aa6c5e74ca3d4813b964619af27f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumAcceptors</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a4362e0b757324796e0528f8274e8ea99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumExclusions</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a815d2155ffc24688998dab86cc283849</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPerDonorParameters</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a74411f5341f13f2ec0b2336fbf6398e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPerAcceptorParameters</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a157188f9cc9dee147b03f8f87ed3fafc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumGlobalParameters</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a25c123d3f1927dfb1a970548b747e1ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTabulatedFunctions</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a900b6c7908cf9696a255012c6647355f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumFunctions</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a294b43c63902a615fe3c3db8b5aa0340</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getEnergyFunction</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>aa9960dbb3bed2cb64315eff6392eea31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnergyFunction</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a6b0c9ff70939ed71a202f955dc18ff31</anchor>
      <arglist>(const std::string &amp;energy)</arglist>
    </member>
    <member kind="function">
      <type>NonbondedMethod</type>
      <name>getNonbondedMethod</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a39b8aa497b6303d1ceaa0c56311f52a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNonbondedMethod</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a705d5824b99e09178ec842c46681fe66</anchor>
      <arglist>(NonbondedMethod method)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCutoffDistance</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a5ed4b7977b5b798d0119735dc2a2add6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCutoffDistance</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>aca0f3cbeec7aac67e140f0ed2f67b526</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addPerDonorParameter</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a3b2e0d6b6ac4e564f26136ae8e796b34</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPerDonorParameterName</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a5986e4459867a4cbcaac887f9d349a8a</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPerDonorParameterName</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>ab1de3e49cb905c294bdf487397922032</anchor>
      <arglist>(int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addPerAcceptorParameter</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>aed94194a42b4bd840aec695886894bc8</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPerAcceptorParameterName</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>aa4b333b15644e7cf1b9f5015a5287878</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPerAcceptorParameterName</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>aad2755414ecca8a726eeae317a47e36e</anchor>
      <arglist>(int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addGlobalParameter</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a6560d40a40578ddaf8b5e4a19e373020</anchor>
      <arglist>(const std::string &amp;name, double defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getGlobalParameterName</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a0dcb0e90bae7a35c1bc8196bb47eb3b7</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalParameterName</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a8eacbbd8c5aafb3c565ff9628f14e69b</anchor>
      <arglist>(int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGlobalParameterDefaultValue</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a03e5d3d717bac0e2e31a8bb9065ea508</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalParameterDefaultValue</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a905fad6be1a06a749b6f04aabe42f481</anchor>
      <arglist>(int index, double defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addDonor</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>af33fae9704b5ad94904858b8b06c84ec</anchor>
      <arglist>(int d1, int d2, int d3, const std::vector&lt; double &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getDonorParameters</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a7d5f881292d24e222187a221f6f3044e</anchor>
      <arglist>(int index, int &amp;d1, int &amp;d2, int &amp;d3, std::vector&lt; double &gt; &amp;parameters) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDonorParameters</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a0fa4d5335b14b7e169936005d731aa76</anchor>
      <arglist>(int index, int d1, int d2, int d3, const std::vector&lt; double &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAcceptor</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a35a3c52c035381a6dc061ffb7ccab681</anchor>
      <arglist>(int a1, int a2, int a3, const std::vector&lt; double &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAcceptorParameters</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a6cd7dddeb4531dda70cd7090f9a8a685</anchor>
      <arglist>(int index, int &amp;a1, int &amp;a2, int &amp;a3, std::vector&lt; double &gt; &amp;parameters) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAcceptorParameters</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a0634b4cf3a445ce68d5c739f57061292</anchor>
      <arglist>(int index, int a1, int a2, int a3, const std::vector&lt; double &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addExclusion</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a1f3921501a0e2dfc156e1a0878da0df1</anchor>
      <arglist>(int donor, int acceptor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getExclusionParticles</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a21f4dea5897dd4dab80beb6aa2548f7d</anchor>
      <arglist>(int index, int &amp;donor, int &amp;acceptor) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExclusionParticles</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a6c049903d9a1f98990f437c892068bd5</anchor>
      <arglist>(int index, int donor, int acceptor)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addTabulatedFunction</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a56f0394db6932b41fec69631d57898e8</anchor>
      <arglist>(const std::string &amp;name, TabulatedFunction *function)</arglist>
    </member>
    <member kind="function">
      <type>const TabulatedFunction &amp;</type>
      <name>getTabulatedFunction</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>aca565c9aac26410e9d0c784c452318f1</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>TabulatedFunction &amp;</type>
      <name>getTabulatedFunction</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a5368b723c01993a3e393ed86c17c5150</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTabulatedFunctionName</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a02287a6bdc8b248e3aa6b1ca9f4fefd2</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addFunction</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>afcc97644875aeb16148a8d53adbfea36</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; double &gt; &amp;values, double min, double max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFunctionParameters</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a71ccd77e7d00990e8e02554ec3f05447</anchor>
      <arglist>(int index, std::string &amp;name, std::vector&lt; double &gt; &amp;values, double &amp;min, double &amp;max) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFunctionParameters</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a49c505e0098204ecb4d372286e157b0c</anchor>
      <arglist>(int index, const std::string &amp;name, const std::vector&lt; double &gt; &amp;values, double min, double max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateParametersInContext</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>abc3002dd21e2e02a9f9dfee170fa3711</anchor>
      <arglist>(Context &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>a392efd6ce97bb75e8544b94c94bc08bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1CustomHbondForce.html</anchorfile>
      <anchor>ae2504c62b5eed8f5dc13f469d4ed7894</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::CustomIntegrator</name>
    <filename>classOpenMM_1_1CustomIntegrator.html</filename>
    <base>OpenMM::Integrator</base>
    <member kind="enumeration">
      <type></type>
      <name>ComputationType</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>aea586424fa2a5ad53befcfd05e06660a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ComputeGlobal</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>aea586424fa2a5ad53befcfd05e06660aa92685e72c262c48e32ac0769ef816ea2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ComputePerDof</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>aea586424fa2a5ad53befcfd05e06660aa72ac252c5090454ed63bcb5a701c174f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ComputeSum</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>aea586424fa2a5ad53befcfd05e06660aab173527500d3e9f759d6eaa78cd58f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ConstrainPositions</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>aea586424fa2a5ad53befcfd05e06660aa1d71d30083000d353b20ec1a9c1e16e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ConstrainVelocities</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>aea586424fa2a5ad53befcfd05e06660aa8c102f9733d685da08467cc98c9c1644</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UpdateContextState</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>aea586424fa2a5ad53befcfd05e06660aa24c98f17ed20b9adc7df0b3acd6b2779</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CustomIntegrator</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a426f88e5ff4fa70bb2e7199ebf4157f6</anchor>
      <arglist>(double stepSize)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumGlobalVariables</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a9c6cd845528ae56ab442ea5679c1a0b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPerDofVariables</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>aee7d5aec84aa1e13f098c4a5af846c1d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumComputations</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a6a4a4b696d3ac58b79c55512ca7e5cb7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addGlobalVariable</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a85bfcfb2d039b95480a90fecdb64cdb6</anchor>
      <arglist>(const std::string &amp;name, double initialValue)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getGlobalVariableName</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a6316c99bcb634089498e48388bd50dd4</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addPerDofVariable</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a3aa1234c1c026d66bf12f545df49d5ac</anchor>
      <arglist>(const std::string &amp;name, double initialValue)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPerDofVariableName</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a9aaef7c4d5e4bff1b1374fe91148a4ac</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGlobalVariable</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a994c9ba5125abc4a120bd89943abf4ee</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGlobalVariableByName</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a9ecc959018af670a08e690ab43f0cad0</anchor>
      <arglist>(const std::string &amp;name) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalVariable</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>aa7805a1ba7e29fcfad0e29ef67209bc0</anchor>
      <arglist>(int index, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalVariableByName</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>af4bfe319f6534fa49ca4fd09e8cefc72</anchor>
      <arglist>(const std::string &amp;name, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPerDofVariable</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>aa977c90ec4a8714647e191ba40a54b9c</anchor>
      <arglist>(int index, std::vector&lt; Vec3 &gt; &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPerDofVariableByName</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>afe40b0618382ac2ae8c3d86df72b2c6f</anchor>
      <arglist>(const std::string &amp;name, std::vector&lt; Vec3 &gt; &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPerDofVariable</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a0a97ba14a8402c1d6ac558c1d8fc3ca0</anchor>
      <arglist>(int index, const std::vector&lt; Vec3 &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPerDofVariableByName</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a87c2dcc00741eff3e5d5c8357a615fa1</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; Vec3 &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addComputeGlobal</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a929eeaf65ded33c5bc810f8ace09a843</anchor>
      <arglist>(const std::string &amp;variable, const std::string &amp;expression)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addComputePerDof</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>ac41a9dd75a3bd5a4f7a5c03060e5a66f</anchor>
      <arglist>(const std::string &amp;variable, const std::string &amp;expression)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addComputeSum</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a7a79ad62ee5b77733476f7b29b445437</anchor>
      <arglist>(const std::string &amp;variable, const std::string &amp;expression)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addConstrainPositions</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a31d5eac5d0ac176c3e5c2278d4abffc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addConstrainVelocities</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a0644650d10dfe1817d3422bd43c7d13d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addUpdateContextState</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>ab41076f951e5587ae21af7ebeb4867ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getComputationStep</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>ad8d27cc27d15572e27ec09f5d5d7a0e0</anchor>
      <arglist>(int index, ComputationType &amp;type, std::string &amp;variable, std::string &amp;expression) const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getKineticEnergyExpression</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>abd542eb2e12e3cf3ad5ac1a57508cedb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKineticEnergyExpression</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>af99627c1d0ce6f52d1d927d87ff8ff9e</anchor>
      <arglist>(const std::string &amp;expression)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRandomNumberSeed</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a9f6f1c1064d592c1594696615078e526</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomNumberSeed</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a6e57a6072a3913e039c5f2da591d7f96</anchor>
      <arglist>(int seed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a670ab49c98d37df4ffdd814ff6428fc8</anchor>
      <arglist>(int steps)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a941fcc46a4e6e1fed160f03aa6cb04a5</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cleanup</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a4b66d5e31b5dc18b314c8a68163263bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>stateChanged</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>ad8e72eb830cf0f4b2365aec4a7cc475d</anchor>
      <arglist>(State::DataType changed)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a227682eb0bbe611b36bb6903e4569af0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>computeKineticEnergy</name>
      <anchorfile>classOpenMM_1_1CustomIntegrator.html</anchorfile>
      <anchor>a34f4fe071710d31af9ea6bfa44c66a84</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::CustomManyParticleForce</name>
    <filename>classOpenMM_1_1CustomManyParticleForce.html</filename>
    <base>OpenMM::Force</base>
    <member kind="enumeration">
      <type></type>
      <name>NonbondedMethod</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NoCutoff</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390a007d65056b9c2fce5e5549b28e4e2ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CutoffNonPeriodic</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390aa2e57a56c2293e046b2fa2231d6f3d6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CutoffPeriodic</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390a168a54330e90997ff68501baaaa41ccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PermutationMode</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>a93b0aee9eeb2ea4707118373dc4810c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>SinglePermutation</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>a93b0aee9eeb2ea4707118373dc4810c7a1c8e287bc11ba1350d6bf4efe867a3db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>UniqueCentralParticle</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>a93b0aee9eeb2ea4707118373dc4810c7a5b768d6674759a5fd47111b7a40c7da9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CustomManyParticleForce</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>a5ad3f35275c766ef05e091f45b3ba629</anchor>
      <arglist>(int particlesPerSet, const std::string &amp;energy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CustomManyParticleForce</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>a1b23478347311ec6670f26289d62a2fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumParticlesPerSet</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>a84137abb22c545fe3b025f2849791284</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumParticles</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>abb6f8d8c14d432090000f19e8beafa99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumExclusions</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>a815d2155ffc24688998dab86cc283849</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPerParticleParameters</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>acd9ffeb359356701529a7ffe77694021</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumGlobalParameters</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>a25c123d3f1927dfb1a970548b747e1ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTabulatedFunctions</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>a900b6c7908cf9696a255012c6647355f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getEnergyFunction</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>aa9960dbb3bed2cb64315eff6392eea31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnergyFunction</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>a6b0c9ff70939ed71a202f955dc18ff31</anchor>
      <arglist>(const std::string &amp;energy)</arglist>
    </member>
    <member kind="function">
      <type>NonbondedMethod</type>
      <name>getNonbondedMethod</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>a39b8aa497b6303d1ceaa0c56311f52a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNonbondedMethod</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>a705d5824b99e09178ec842c46681fe66</anchor>
      <arglist>(NonbondedMethod method)</arglist>
    </member>
    <member kind="function">
      <type>PermutationMode</type>
      <name>getPermutationMode</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>aba9402aa55a7fd4532b1346d30520072</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPermutationMode</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>a7656c0d01c85c54aedd0c3396a318e1d</anchor>
      <arglist>(PermutationMode mode)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCutoffDistance</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>a5ed4b7977b5b798d0119735dc2a2add6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCutoffDistance</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>aca0f3cbeec7aac67e140f0ed2f67b526</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addPerParticleParameter</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>a98c86338def0655742c4b0ddb25a219c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPerParticleParameterName</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>a1ac69476629bb277266c55d3317045d0</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPerParticleParameterName</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>a4bbd3cacdb6f0cfdb20bfb553f3a80ab</anchor>
      <arglist>(int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addGlobalParameter</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>a6560d40a40578ddaf8b5e4a19e373020</anchor>
      <arglist>(const std::string &amp;name, double defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getGlobalParameterName</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>a0dcb0e90bae7a35c1bc8196bb47eb3b7</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalParameterName</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>a8eacbbd8c5aafb3c565ff9628f14e69b</anchor>
      <arglist>(int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGlobalParameterDefaultValue</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>a03e5d3d717bac0e2e31a8bb9065ea508</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalParameterDefaultValue</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>a905fad6be1a06a749b6f04aabe42f481</anchor>
      <arglist>(int index, double defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addParticle</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>a56876c148b945ad5771e47d3a7b36c13</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;parameters, int type=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParticleParameters</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>a924eea5b18a850105f7c019701a8e21a</anchor>
      <arglist>(int index, std::vector&lt; double &gt; &amp;parameters, int &amp;type) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticleParameters</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>a1849236f390b90a80db5f2a990568c44</anchor>
      <arglist>(int index, const std::vector&lt; double &gt; &amp;parameters, int type)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addExclusion</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>ad890e952620cae8e616ccb18eb63737a</anchor>
      <arglist>(int particle1, int particle2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getExclusionParticles</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>aa4f165c0eec62dae9936e5330722f559</anchor>
      <arglist>(int index, int &amp;particle1, int &amp;particle2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExclusionParticles</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>a53bbf77cadbd74abd8b6e9acdb85c0dd</anchor>
      <arglist>(int index, int particle1, int particle2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createExclusionsFromBonds</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>af40bce98a25df0877f53a67948797c9a</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; int, int &gt; &gt; &amp;bonds, int bondCutoff)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTypeFilter</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>a79ea2332e566b8b88e3985bd2367794e</anchor>
      <arglist>(int index, std::set&lt; int &gt; &amp;types) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTypeFilter</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>a9f8a912c6871871788364f42e5624a80</anchor>
      <arglist>(int index, const std::set&lt; int &gt; &amp;types)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addTabulatedFunction</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>a56f0394db6932b41fec69631d57898e8</anchor>
      <arglist>(const std::string &amp;name, TabulatedFunction *function)</arglist>
    </member>
    <member kind="function">
      <type>const TabulatedFunction &amp;</type>
      <name>getTabulatedFunction</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>aca565c9aac26410e9d0c784c452318f1</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>TabulatedFunction &amp;</type>
      <name>getTabulatedFunction</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>a5368b723c01993a3e393ed86c17c5150</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTabulatedFunctionName</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>a02287a6bdc8b248e3aa6b1ca9f4fefd2</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateParametersInContext</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>abc3002dd21e2e02a9f9dfee170fa3711</anchor>
      <arglist>(Context &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>a392efd6ce97bb75e8544b94c94bc08bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1CustomManyParticleForce.html</anchorfile>
      <anchor>ae2504c62b5eed8f5dc13f469d4ed7894</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::CustomNonbondedForce</name>
    <filename>classOpenMM_1_1CustomNonbondedForce.html</filename>
    <base>OpenMM::Force</base>
    <member kind="enumeration">
      <type></type>
      <name>NonbondedMethod</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NoCutoff</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390a007d65056b9c2fce5e5549b28e4e2ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CutoffNonPeriodic</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390aa2e57a56c2293e046b2fa2231d6f3d6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CutoffPeriodic</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390a168a54330e90997ff68501baaaa41ccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CustomNonbondedForce</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a8b5e9921bb98a5e4787133c454f55c4b</anchor>
      <arglist>(const std::string &amp;energy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CustomNonbondedForce</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>ad37b5991112ec8f010cf5350c35efcb2</anchor>
      <arglist>(const CustomNonbondedForce &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CustomNonbondedForce</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>afab2b65af2104097094acfaeaaf27343</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumParticles</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>abb6f8d8c14d432090000f19e8beafa99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumExclusions</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a815d2155ffc24688998dab86cc283849</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPerParticleParameters</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>acd9ffeb359356701529a7ffe77694021</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumGlobalParameters</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a25c123d3f1927dfb1a970548b747e1ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTabulatedFunctions</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a900b6c7908cf9696a255012c6647355f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumFunctions</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a294b43c63902a615fe3c3db8b5aa0340</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumInteractionGroups</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>aabf82f8f6bc023eaae348c32ccd2e559</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getEnergyFunction</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>aa9960dbb3bed2cb64315eff6392eea31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnergyFunction</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a6b0c9ff70939ed71a202f955dc18ff31</anchor>
      <arglist>(const std::string &amp;energy)</arglist>
    </member>
    <member kind="function">
      <type>NonbondedMethod</type>
      <name>getNonbondedMethod</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a39b8aa497b6303d1ceaa0c56311f52a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNonbondedMethod</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a705d5824b99e09178ec842c46681fe66</anchor>
      <arglist>(NonbondedMethod method)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCutoffDistance</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a5ed4b7977b5b798d0119735dc2a2add6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCutoffDistance</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>aca0f3cbeec7aac67e140f0ed2f67b526</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUseSwitchingFunction</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a2a77b53c16b69d6b34f840932b5e15aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseSwitchingFunction</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a03cc7c0d9896228e78e795054ed812b8</anchor>
      <arglist>(bool use)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSwitchingDistance</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a90d2f446c6698b8b39570e4b54f84d2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSwitchingDistance</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a18648cd06b17b4f1fabb5fa556e6f52d</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUseLongRangeCorrection</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>ab3443034a0fa84f4c731edb03e6e70a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseLongRangeCorrection</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a12428cab57a5e009d527acab0e1659c8</anchor>
      <arglist>(bool use)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addPerParticleParameter</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a98c86338def0655742c4b0ddb25a219c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPerParticleParameterName</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a1ac69476629bb277266c55d3317045d0</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPerParticleParameterName</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a4bbd3cacdb6f0cfdb20bfb553f3a80ab</anchor>
      <arglist>(int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addGlobalParameter</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a6560d40a40578ddaf8b5e4a19e373020</anchor>
      <arglist>(const std::string &amp;name, double defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getGlobalParameterName</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a0dcb0e90bae7a35c1bc8196bb47eb3b7</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalParameterName</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a8eacbbd8c5aafb3c565ff9628f14e69b</anchor>
      <arglist>(int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGlobalParameterDefaultValue</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a03e5d3d717bac0e2e31a8bb9065ea508</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalParameterDefaultValue</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a905fad6be1a06a749b6f04aabe42f481</anchor>
      <arglist>(int index, double defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addParticle</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>adf422a3ebd416157d0d18fbcabba50ce</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParticleParameters</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a699b6427b68d93a528e19e4ab025b874</anchor>
      <arglist>(int index, std::vector&lt; double &gt; &amp;parameters) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticleParameters</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a03a5de5245b1dc884cf6b050b1dc49df</anchor>
      <arglist>(int index, const std::vector&lt; double &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addExclusion</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>ad890e952620cae8e616ccb18eb63737a</anchor>
      <arglist>(int particle1, int particle2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getExclusionParticles</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>aa4f165c0eec62dae9936e5330722f559</anchor>
      <arglist>(int index, int &amp;particle1, int &amp;particle2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExclusionParticles</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a53bbf77cadbd74abd8b6e9acdb85c0dd</anchor>
      <arglist>(int index, int particle1, int particle2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createExclusionsFromBonds</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>af40bce98a25df0877f53a67948797c9a</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; int, int &gt; &gt; &amp;bonds, int bondCutoff)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addTabulatedFunction</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a56f0394db6932b41fec69631d57898e8</anchor>
      <arglist>(const std::string &amp;name, TabulatedFunction *function)</arglist>
    </member>
    <member kind="function">
      <type>const TabulatedFunction &amp;</type>
      <name>getTabulatedFunction</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>aca565c9aac26410e9d0c784c452318f1</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>TabulatedFunction &amp;</type>
      <name>getTabulatedFunction</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a5368b723c01993a3e393ed86c17c5150</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTabulatedFunctionName</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a02287a6bdc8b248e3aa6b1ca9f4fefd2</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addFunction</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>afcc97644875aeb16148a8d53adbfea36</anchor>
      <arglist>(const std::string &amp;name, const std::vector&lt; double &gt; &amp;values, double min, double max)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFunctionParameters</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a71ccd77e7d00990e8e02554ec3f05447</anchor>
      <arglist>(int index, std::string &amp;name, std::vector&lt; double &gt; &amp;values, double &amp;min, double &amp;max) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFunctionParameters</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a49c505e0098204ecb4d372286e157b0c</anchor>
      <arglist>(int index, const std::string &amp;name, const std::vector&lt; double &gt; &amp;values, double min, double max)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addInteractionGroup</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>ab69f7ab015de12a05bc4bcdf4653f577</anchor>
      <arglist>(const std::set&lt; int &gt; &amp;set1, const std::set&lt; int &gt; &amp;set2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getInteractionGroupParameters</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>ae6221f9e048f1d5eecd44321b429ca91</anchor>
      <arglist>(int index, std::set&lt; int &gt; &amp;set1, std::set&lt; int &gt; &amp;set2) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInteractionGroupParameters</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>aa1c3743512ea35dd5b3767e5fbc54ce6</anchor>
      <arglist>(int index, const std::set&lt; int &gt; &amp;set1, const std::set&lt; int &gt; &amp;set2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateParametersInContext</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>abc3002dd21e2e02a9f9dfee170fa3711</anchor>
      <arglist>(Context &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>a392efd6ce97bb75e8544b94c94bc08bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1CustomNonbondedForce.html</anchorfile>
      <anchor>ae2504c62b5eed8f5dc13f469d4ed7894</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::CustomTorsionForce</name>
    <filename>classOpenMM_1_1CustomTorsionForce.html</filename>
    <base>OpenMM::Force</base>
    <member kind="function">
      <type></type>
      <name>CustomTorsionForce</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>a973acb6796c67afdaf8505d0a06aead2</anchor>
      <arglist>(const std::string &amp;energy)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTorsions</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>a3bb8e6820ac5baede1973c6bb1fd99aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPerTorsionParameters</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>a243aa2b8e8246b13ff61efd0fcc9a135</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumGlobalParameters</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>a25c123d3f1927dfb1a970548b747e1ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getEnergyFunction</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>aa9960dbb3bed2cb64315eff6392eea31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnergyFunction</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>a6b0c9ff70939ed71a202f955dc18ff31</anchor>
      <arglist>(const std::string &amp;energy)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addPerTorsionParameter</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>a8f95f21c6b4ccfa75b7e929d8d08fa84</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPerTorsionParameterName</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>a6c40480c4b4182c64a58dc494a2edd8a</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPerTorsionParameterName</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>aa2ec33e7a69236261dc3ed29573e76a8</anchor>
      <arglist>(int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addGlobalParameter</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>a6560d40a40578ddaf8b5e4a19e373020</anchor>
      <arglist>(const std::string &amp;name, double defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getGlobalParameterName</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>a0dcb0e90bae7a35c1bc8196bb47eb3b7</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalParameterName</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>a8eacbbd8c5aafb3c565ff9628f14e69b</anchor>
      <arglist>(int index, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getGlobalParameterDefaultValue</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>a03e5d3d717bac0e2e31a8bb9065ea508</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalParameterDefaultValue</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>a905fad6be1a06a749b6f04aabe42f481</anchor>
      <arglist>(int index, double defaultValue)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addTorsion</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>aa7a9485094c250184dad6a39d93805c3</anchor>
      <arglist>(int particle1, int particle2, int particle3, int particle4, const std::vector&lt; double &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTorsionParameters</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>acf856421e4b825c53c5288c0162ebcf7</anchor>
      <arglist>(int index, int &amp;particle1, int &amp;particle2, int &amp;particle3, int &amp;particle4, std::vector&lt; double &gt; &amp;parameters) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTorsionParameters</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>aafd17ab777f4ce4b67ff6de2635e1ba2</anchor>
      <arglist>(int index, int particle1, int particle2, int particle3, int particle4, const std::vector&lt; double &gt; &amp;parameters)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateParametersInContext</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>abc3002dd21e2e02a9f9dfee170fa3711</anchor>
      <arglist>(Context &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>a392efd6ce97bb75e8544b94c94bc08bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1CustomTorsionForce.html</anchorfile>
      <anchor>ae2504c62b5eed8f5dc13f469d4ed7894</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::Discrete1DFunction</name>
    <filename>classOpenMM_1_1Discrete1DFunction.html</filename>
    <base>OpenMM::TabulatedFunction</base>
    <member kind="function">
      <type></type>
      <name>Discrete1DFunction</name>
      <anchorfile>classOpenMM_1_1Discrete1DFunction.html</anchorfile>
      <anchor>a829ec2fe5c8d9ac1a2018c9c440d9f3f</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFunctionParameters</name>
      <anchorfile>classOpenMM_1_1Discrete1DFunction.html</anchorfile>
      <anchor>a4ab31b0356869eca09922f58fb40aa09</anchor>
      <arglist>(std::vector&lt; double &gt; &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFunctionParameters</name>
      <anchorfile>classOpenMM_1_1Discrete1DFunction.html</anchorfile>
      <anchor>a194672ae968940c9535ff0a2ca326544</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>Discrete1DFunction *</type>
      <name>Copy</name>
      <anchorfile>classOpenMM_1_1Discrete1DFunction.html</anchorfile>
      <anchor>ac3897b83c4a4f958543337fcf459d692</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::Discrete2DFunction</name>
    <filename>classOpenMM_1_1Discrete2DFunction.html</filename>
    <base>OpenMM::TabulatedFunction</base>
    <member kind="function">
      <type></type>
      <name>Discrete2DFunction</name>
      <anchorfile>classOpenMM_1_1Discrete2DFunction.html</anchorfile>
      <anchor>a2abb0f9ad463805f2f903ae32e568cb3</anchor>
      <arglist>(int xsize, int ysize, const std::vector&lt; double &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFunctionParameters</name>
      <anchorfile>classOpenMM_1_1Discrete2DFunction.html</anchorfile>
      <anchor>a197518ba92e67fdddfe65a1b9fa2d9d7</anchor>
      <arglist>(int &amp;xsize, int &amp;ysize, std::vector&lt; double &gt; &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFunctionParameters</name>
      <anchorfile>classOpenMM_1_1Discrete2DFunction.html</anchorfile>
      <anchor>a4c978fb194cf54f57e8bd25ee890517d</anchor>
      <arglist>(int xsize, int ysize, const std::vector&lt; double &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>Discrete2DFunction *</type>
      <name>Copy</name>
      <anchorfile>classOpenMM_1_1Discrete2DFunction.html</anchorfile>
      <anchor>a5347ce8d26e792ae155f050e3715bcc1</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::Discrete3DFunction</name>
    <filename>classOpenMM_1_1Discrete3DFunction.html</filename>
    <base>OpenMM::TabulatedFunction</base>
    <member kind="function">
      <type></type>
      <name>Discrete3DFunction</name>
      <anchorfile>classOpenMM_1_1Discrete3DFunction.html</anchorfile>
      <anchor>acf66d195fdc32b0ee04f5e5da877bc42</anchor>
      <arglist>(int xsize, int ysize, int zsize, const std::vector&lt; double &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getFunctionParameters</name>
      <anchorfile>classOpenMM_1_1Discrete3DFunction.html</anchorfile>
      <anchor>a7ffb34d212059e56cea976bf66a66905</anchor>
      <arglist>(int &amp;xsize, int &amp;ysize, int &amp;zsize, std::vector&lt; double &gt; &amp;values) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFunctionParameters</name>
      <anchorfile>classOpenMM_1_1Discrete3DFunction.html</anchorfile>
      <anchor>ab9c28aa4128c3bfe7ad5bb4acabf3ab1</anchor>
      <arglist>(int xsize, int ysize, int zsize, const std::vector&lt; double &gt; &amp;values)</arglist>
    </member>
    <member kind="function">
      <type>Discrete3DFunction *</type>
      <name>Copy</name>
      <anchorfile>classOpenMM_1_1Discrete3DFunction.html</anchorfile>
      <anchor>aef38e9f42a0e48bf54b163e4e6786105</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::DrudeForce</name>
    <filename>classOpenMM_1_1DrudeForce.html</filename>
    <base>OpenMM::Force</base>
    <member kind="function">
      <type></type>
      <name>DrudeForce</name>
      <anchorfile>classOpenMM_1_1DrudeForce.html</anchorfile>
      <anchor>aea401c3f7b0d8787f62fdbd2818dbc2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumParticles</name>
      <anchorfile>classOpenMM_1_1DrudeForce.html</anchorfile>
      <anchor>abb6f8d8c14d432090000f19e8beafa99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumScreenedPairs</name>
      <anchorfile>classOpenMM_1_1DrudeForce.html</anchorfile>
      <anchor>a16527da0494827dfe5b966564d28b5ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addParticle</name>
      <anchorfile>classOpenMM_1_1DrudeForce.html</anchorfile>
      <anchor>a13f881b7db32ee615ff5eff33b57d333</anchor>
      <arglist>(int particle, int particle1, int particle2, int particle3, int particle4, double charge, double polarizability, double aniso12, double aniso34)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParticleParameters</name>
      <anchorfile>classOpenMM_1_1DrudeForce.html</anchorfile>
      <anchor>a41a56f92027aa4af6e4cd66e18f555d8</anchor>
      <arglist>(int index, int &amp;particle, int &amp;particle1, int &amp;particle2, int &amp;particle3, int &amp;particle4, double &amp;charge, double &amp;polarizability, double &amp;aniso12, double &amp;aniso34) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticleParameters</name>
      <anchorfile>classOpenMM_1_1DrudeForce.html</anchorfile>
      <anchor>abf00db6f4211721cf63eed9baebcc877</anchor>
      <arglist>(int index, int particle, int particle1, int particle2, int particle3, int particle4, double charge, double polarizability, double aniso12, double aniso34)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addScreenedPair</name>
      <anchorfile>classOpenMM_1_1DrudeForce.html</anchorfile>
      <anchor>a3ea7bc9b2c97a973c364030e9e5a5088</anchor>
      <arglist>(int particle1, int particle2, double thole)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getScreenedPairParameters</name>
      <anchorfile>classOpenMM_1_1DrudeForce.html</anchorfile>
      <anchor>afefd7f4029f37d0fbb277c1b813a1bc4</anchor>
      <arglist>(int index, int &amp;particle1, int &amp;particle2, double &amp;thole) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScreenedPairParameters</name>
      <anchorfile>classOpenMM_1_1DrudeForce.html</anchorfile>
      <anchor>af885bd6ff52a2b6e878480afec2322db</anchor>
      <arglist>(int index, int particle1, int particle2, double thole)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateParametersInContext</name>
      <anchorfile>classOpenMM_1_1DrudeForce.html</anchorfile>
      <anchor>abc3002dd21e2e02a9f9dfee170fa3711</anchor>
      <arglist>(Context &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1DrudeForce.html</anchorfile>
      <anchor>a392efd6ce97bb75e8544b94c94bc08bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1DrudeForce.html</anchorfile>
      <anchor>ae2504c62b5eed8f5dc13f469d4ed7894</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::DrudeLangevinIntegrator</name>
    <filename>classOpenMM_1_1DrudeLangevinIntegrator.html</filename>
    <base>OpenMM::Integrator</base>
    <member kind="function">
      <type></type>
      <name>DrudeLangevinIntegrator</name>
      <anchorfile>classOpenMM_1_1DrudeLangevinIntegrator.html</anchorfile>
      <anchor>a9c49b06166d9552165559910d6543bed</anchor>
      <arglist>(double temperature, double frictionCoeff, double drudeTemperature, double drudeFrictionCoeff, double stepSize)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTemperature</name>
      <anchorfile>classOpenMM_1_1DrudeLangevinIntegrator.html</anchorfile>
      <anchor>a00d75976e31278340ed5550e9f1479da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTemperature</name>
      <anchorfile>classOpenMM_1_1DrudeLangevinIntegrator.html</anchorfile>
      <anchor>a0eaab969662d838cfb0528a4e5cf7e13</anchor>
      <arglist>(double temp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFriction</name>
      <anchorfile>classOpenMM_1_1DrudeLangevinIntegrator.html</anchorfile>
      <anchor>aeef3b48c4eab3044c61869b3a521f32f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFriction</name>
      <anchorfile>classOpenMM_1_1DrudeLangevinIntegrator.html</anchorfile>
      <anchor>a68359308309527032c014d7151ac69c9</anchor>
      <arglist>(double coeff)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDrudeTemperature</name>
      <anchorfile>classOpenMM_1_1DrudeLangevinIntegrator.html</anchorfile>
      <anchor>a6369a5c4ebf78b683a053fed2c8968ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDrudeTemperature</name>
      <anchorfile>classOpenMM_1_1DrudeLangevinIntegrator.html</anchorfile>
      <anchor>a4357b93821ca3e7b7ce072ec342f4fdc</anchor>
      <arglist>(double temp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDrudeFriction</name>
      <anchorfile>classOpenMM_1_1DrudeLangevinIntegrator.html</anchorfile>
      <anchor>a350149473c8e312101a7a3353ae71fe0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDrudeFriction</name>
      <anchorfile>classOpenMM_1_1DrudeLangevinIntegrator.html</anchorfile>
      <anchor>a644890c042ea5237403044ed71b9208b</anchor>
      <arglist>(double coeff)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRandomNumberSeed</name>
      <anchorfile>classOpenMM_1_1DrudeLangevinIntegrator.html</anchorfile>
      <anchor>a9f6f1c1064d592c1594696615078e526</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomNumberSeed</name>
      <anchorfile>classOpenMM_1_1DrudeLangevinIntegrator.html</anchorfile>
      <anchor>a6e57a6072a3913e039c5f2da591d7f96</anchor>
      <arglist>(int seed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classOpenMM_1_1DrudeLangevinIntegrator.html</anchorfile>
      <anchor>a670ab49c98d37df4ffdd814ff6428fc8</anchor>
      <arglist>(int steps)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1DrudeLangevinIntegrator.html</anchorfile>
      <anchor>a941fcc46a4e6e1fed160f03aa6cb04a5</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cleanup</name>
      <anchorfile>classOpenMM_1_1DrudeLangevinIntegrator.html</anchorfile>
      <anchor>a4b66d5e31b5dc18b314c8a68163263bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>stateChanged</name>
      <anchorfile>classOpenMM_1_1DrudeLangevinIntegrator.html</anchorfile>
      <anchor>ad8e72eb830cf0f4b2365aec4a7cc475d</anchor>
      <arglist>(State::DataType changed)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1DrudeLangevinIntegrator.html</anchorfile>
      <anchor>a227682eb0bbe611b36bb6903e4569af0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>computeKineticEnergy</name>
      <anchorfile>classOpenMM_1_1DrudeLangevinIntegrator.html</anchorfile>
      <anchor>a34f4fe071710d31af9ea6bfa44c66a84</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::DrudeSCFIntegrator</name>
    <filename>classOpenMM_1_1DrudeSCFIntegrator.html</filename>
    <base>OpenMM::Integrator</base>
    <member kind="function">
      <type></type>
      <name>DrudeSCFIntegrator</name>
      <anchorfile>classOpenMM_1_1DrudeSCFIntegrator.html</anchorfile>
      <anchor>aca79f9ef0a5115513770d6ae4250454c</anchor>
      <arglist>(double stepSize)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getMinimizationErrorTolerance</name>
      <anchorfile>classOpenMM_1_1DrudeSCFIntegrator.html</anchorfile>
      <anchor>a14ed326d08dc7ccf6ba2be4ddcf73327</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimizationErrorTolerance</name>
      <anchorfile>classOpenMM_1_1DrudeSCFIntegrator.html</anchorfile>
      <anchor>a40e30c7822635390dc5c06048b328db3</anchor>
      <arglist>(double tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classOpenMM_1_1DrudeSCFIntegrator.html</anchorfile>
      <anchor>a670ab49c98d37df4ffdd814ff6428fc8</anchor>
      <arglist>(int steps)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1DrudeSCFIntegrator.html</anchorfile>
      <anchor>a941fcc46a4e6e1fed160f03aa6cb04a5</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cleanup</name>
      <anchorfile>classOpenMM_1_1DrudeSCFIntegrator.html</anchorfile>
      <anchor>a4b66d5e31b5dc18b314c8a68163263bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>stateChanged</name>
      <anchorfile>classOpenMM_1_1DrudeSCFIntegrator.html</anchorfile>
      <anchor>ad8e72eb830cf0f4b2365aec4a7cc475d</anchor>
      <arglist>(State::DataType changed)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1DrudeSCFIntegrator.html</anchorfile>
      <anchor>a227682eb0bbe611b36bb6903e4569af0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>computeKineticEnergy</name>
      <anchorfile>classOpenMM_1_1DrudeSCFIntegrator.html</anchorfile>
      <anchor>a34f4fe071710d31af9ea6bfa44c66a84</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::Force</name>
    <filename>classOpenMM_1_1Force.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1Force.html</anchorfile>
      <anchor>ac0773183581291ca4886f7a62fad2f84</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1Force.html</anchorfile>
      <anchor>ae05329810061d5bc15681ffb3d64e6b7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ContextImpl</name>
      <anchorfile>classOpenMM_1_1Force.html</anchorfile>
      <anchor>a7e2f3e20ff3f49ee3b9c0e529422b663</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::GBSAOBCForce</name>
    <filename>classOpenMM_1_1GBSAOBCForce.html</filename>
    <base>OpenMM::Force</base>
    <member kind="enumeration">
      <type></type>
      <name>NonbondedMethod</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NoCutoff</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390a007d65056b9c2fce5e5549b28e4e2ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CutoffNonPeriodic</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390aa2e57a56c2293e046b2fa2231d6f3d6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CutoffPeriodic</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390a168a54330e90997ff68501baaaa41ccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GBSAOBCForce</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>a58d09c91fa9b78b2da95bd7d88833cbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumParticles</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>abb6f8d8c14d432090000f19e8beafa99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addParticle</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>abad74551810bef20798fe24ffa7b4e91</anchor>
      <arglist>(double charge, double radius, double scalingFactor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParticleParameters</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>a8bfd0a9cbdb7491ca431ae005c351bef</anchor>
      <arglist>(int index, double &amp;charge, double &amp;radius, double &amp;scalingFactor) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticleParameters</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>a2e41c8f2ca482df7f8b5ca289674f7c5</anchor>
      <arglist>(int index, double charge, double radius, double scalingFactor)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSolventDielectric</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>a936397a02cce817fc3c91317bb9009cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSolventDielectric</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>a87536d9d2f9c494220b1fc2c8e3f004b</anchor>
      <arglist>(double dielectric)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSoluteDielectric</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>ab69b68443225c10dc15f54ec5d4ba0d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSoluteDielectric</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>a77c95618f97773dced0ac319a07f139c</anchor>
      <arglist>(double dielectric)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSurfaceAreaEnergy</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>a5c736f8e896f320319f6662ca89c6c0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSurfaceAreaEnergy</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>a1d4698c196854c5b2a77567201ea0d07</anchor>
      <arglist>(double energy)</arglist>
    </member>
    <member kind="function">
      <type>NonbondedMethod</type>
      <name>getNonbondedMethod</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>a39b8aa497b6303d1ceaa0c56311f52a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNonbondedMethod</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>a705d5824b99e09178ec842c46681fe66</anchor>
      <arglist>(NonbondedMethod method)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCutoffDistance</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>a5ed4b7977b5b798d0119735dc2a2add6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCutoffDistance</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>aca0f3cbeec7aac67e140f0ed2f67b526</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateParametersInContext</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>abc3002dd21e2e02a9f9dfee170fa3711</anchor>
      <arglist>(Context &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>a392efd6ce97bb75e8544b94c94bc08bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1GBSAOBCForce.html</anchorfile>
      <anchor>ae2504c62b5eed8f5dc13f469d4ed7894</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::GBVIForce</name>
    <filename>classOpenMM_1_1GBVIForce.html</filename>
    <base>OpenMM::Force</base>
    <member kind="enumeration">
      <type></type>
      <name>NonbondedMethod</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NoCutoff</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390a007d65056b9c2fce5e5549b28e4e2ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CutoffNonPeriodic</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390aa2e57a56c2293e046b2fa2231d6f3d6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CutoffPeriodic</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390a168a54330e90997ff68501baaaa41ccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BornRadiusScalingMethod</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a19caf4f7812ef42b2af35924aa272699</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NoScaling</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a19caf4f7812ef42b2af35924aa272699a4eb4ab774bb569ff0d1197fa91534265</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>QuinticSpline</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a19caf4f7812ef42b2af35924aa272699a4c8464e42f753239e02c195d5ebea5a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GBVIForce</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a9f88e3b39de4f7ec1d3ef50cc27d9ea5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumParticles</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>abb6f8d8c14d432090000f19e8beafa99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addParticle</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a9bcacc5a829b95a3a80fd0570d0a961a</anchor>
      <arglist>(double charge, double radius, double gamma)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParticleParameters</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a172fe08265497aa3529c09d138b3efd5</anchor>
      <arglist>(int index, double &amp;charge, double &amp;radius, double &amp;gamma) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticleParameters</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>afe6668bdb022cc46eec6284e8ea793ff</anchor>
      <arglist>(int index, double charge, double radius, double gamma)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addBond</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a7c3dd3f640d5f4788dce49d7e1032b24</anchor>
      <arglist>(int particle1, int particle2, double distance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBondParameters</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a7ce70a59446a79b67c0100d230f5cb22</anchor>
      <arglist>(int index, int &amp;particle1, int &amp;particle2, double &amp;distance) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBondParameters</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>aef2965f325a14421afae18aad085f8ac</anchor>
      <arglist>(int index, int particle1, int particle2, double bondLength)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBonds</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a16f41cfeb5ee7f6163d00a230a031bcd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSolventDielectric</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a936397a02cce817fc3c91317bb9009cd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSolventDielectric</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a87536d9d2f9c494220b1fc2c8e3f004b</anchor>
      <arglist>(double dielectric)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSoluteDielectric</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>ab69b68443225c10dc15f54ec5d4ba0d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSoluteDielectric</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a77c95618f97773dced0ac319a07f139c</anchor>
      <arglist>(double dielectric)</arglist>
    </member>
    <member kind="function">
      <type>NonbondedMethod</type>
      <name>getNonbondedMethod</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a39b8aa497b6303d1ceaa0c56311f52a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNonbondedMethod</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a705d5824b99e09178ec842c46681fe66</anchor>
      <arglist>(NonbondedMethod method)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCutoffDistance</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a5ed4b7977b5b798d0119735dc2a2add6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCutoffDistance</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>aca0f3cbeec7aac67e140f0ed2f67b526</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>BornRadiusScalingMethod</type>
      <name>getBornRadiusScalingMethod</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a035fb99330b00539214a5a0e03f1b6c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBornRadiusScalingMethod</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a65adc8268402bc09c84451b2d13f6868</anchor>
      <arglist>(BornRadiusScalingMethod method)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getQuinticLowerLimitFactor</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>af92a203649d8804dc9fa13497eb997d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQuinticLowerLimitFactor</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a631d592007b8d69c6db03c13aba047ba</anchor>
      <arglist>(double quinticLowerLimitFactor)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getQuinticUpperBornRadiusLimit</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>af2982c272f60af1c0b18ead553c4b035</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setQuinticUpperBornRadiusLimit</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>aad59ae7274adb0e8ddcc2c5663fe1605</anchor>
      <arglist>(double quinticUpperBornRadiusLimit)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>a392efd6ce97bb75e8544b94c94bc08bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1GBVIForce.html</anchorfile>
      <anchor>ae2504c62b5eed8f5dc13f469d4ed7894</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::HarmonicAngleForce</name>
    <filename>classOpenMM_1_1HarmonicAngleForce.html</filename>
    <base>OpenMM::Force</base>
    <member kind="function">
      <type></type>
      <name>HarmonicAngleForce</name>
      <anchorfile>classOpenMM_1_1HarmonicAngleForce.html</anchorfile>
      <anchor>a2520d5a39f3d88f1c53357be39a62a86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumAngles</name>
      <anchorfile>classOpenMM_1_1HarmonicAngleForce.html</anchorfile>
      <anchor>a6d6db7820f5284ccd108921214a49502</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addAngle</name>
      <anchorfile>classOpenMM_1_1HarmonicAngleForce.html</anchorfile>
      <anchor>a14724094ec5cfb1b7157545e3ce3b4c6</anchor>
      <arglist>(int particle1, int particle2, int particle3, double angle, double k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getAngleParameters</name>
      <anchorfile>classOpenMM_1_1HarmonicAngleForce.html</anchorfile>
      <anchor>a4cbdad168d5d124ff05e50aee89d139f</anchor>
      <arglist>(int index, int &amp;particle1, int &amp;particle2, int &amp;particle3, double &amp;angle, double &amp;k) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngleParameters</name>
      <anchorfile>classOpenMM_1_1HarmonicAngleForce.html</anchorfile>
      <anchor>a7bf805d32758b36678ca7b6f865986ec</anchor>
      <arglist>(int index, int particle1, int particle2, int particle3, double angle, double k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateParametersInContext</name>
      <anchorfile>classOpenMM_1_1HarmonicAngleForce.html</anchorfile>
      <anchor>abc3002dd21e2e02a9f9dfee170fa3711</anchor>
      <arglist>(Context &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1HarmonicAngleForce.html</anchorfile>
      <anchor>a392efd6ce97bb75e8544b94c94bc08bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1HarmonicAngleForce.html</anchorfile>
      <anchor>ae2504c62b5eed8f5dc13f469d4ed7894</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::HarmonicBondForce</name>
    <filename>classOpenMM_1_1HarmonicBondForce.html</filename>
    <base>OpenMM::Force</base>
    <member kind="function">
      <type></type>
      <name>HarmonicBondForce</name>
      <anchorfile>classOpenMM_1_1HarmonicBondForce.html</anchorfile>
      <anchor>ab8fb81a6182ba771322aef78cc907143</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumBonds</name>
      <anchorfile>classOpenMM_1_1HarmonicBondForce.html</anchorfile>
      <anchor>a16f41cfeb5ee7f6163d00a230a031bcd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addBond</name>
      <anchorfile>classOpenMM_1_1HarmonicBondForce.html</anchorfile>
      <anchor>a7adef2195d5fde6d61deea685d79ca43</anchor>
      <arglist>(int particle1, int particle2, double length, double k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getBondParameters</name>
      <anchorfile>classOpenMM_1_1HarmonicBondForce.html</anchorfile>
      <anchor>a4abbf670b765860f952b5a08f84bad19</anchor>
      <arglist>(int index, int &amp;particle1, int &amp;particle2, double &amp;length, double &amp;k) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBondParameters</name>
      <anchorfile>classOpenMM_1_1HarmonicBondForce.html</anchorfile>
      <anchor>a1a944df5b35209e5d636bdf30ecea819</anchor>
      <arglist>(int index, int particle1, int particle2, double length, double k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateParametersInContext</name>
      <anchorfile>classOpenMM_1_1HarmonicBondForce.html</anchorfile>
      <anchor>abc3002dd21e2e02a9f9dfee170fa3711</anchor>
      <arglist>(Context &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1HarmonicBondForce.html</anchorfile>
      <anchor>a392efd6ce97bb75e8544b94c94bc08bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1HarmonicBondForce.html</anchorfile>
      <anchor>ae2504c62b5eed8f5dc13f469d4ed7894</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::Integrator</name>
    <filename>classOpenMM_1_1Integrator.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>step</name>
      <anchorfile>classOpenMM_1_1Integrator.html</anchorfile>
      <anchor>a53edbe718bcc136ba59e8ba840f6774d</anchor>
      <arglist>(int steps)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1Integrator.html</anchorfile>
      <anchor>afe316586ff785422c7a79a35bfa532e5</anchor>
      <arglist>(ContextImpl &amp;context)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>cleanup</name>
      <anchorfile>classOpenMM_1_1Integrator.html</anchorfile>
      <anchor>a09f4fe805fa9a54d4d68c5b29c1502e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1Integrator.html</anchorfile>
      <anchor>ab39a8e99fce4c32b97e1292a36527c71</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual double</type>
      <name>computeKineticEnergy</name>
      <anchorfile>classOpenMM_1_1Integrator.html</anchorfile>
      <anchor>a94c9f00b4cc04c6f8b98ebf2d82851e0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>Context</name>
      <anchorfile>classOpenMM_1_1Integrator.html</anchorfile>
      <anchor>ac26c806e60ca4a0547680edb68f6e39b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ContextImpl</name>
      <anchorfile>classOpenMM_1_1Integrator.html</anchorfile>
      <anchor>a7e2f3e20ff3f49ee3b9c0e529422b663</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::Kernel</name>
    <filename>classOpenMM_1_1Kernel.html</filename>
    <member kind="function">
      <type></type>
      <name>Kernel</name>
      <anchorfile>classOpenMM_1_1Kernel.html</anchorfile>
      <anchor>a4d7fb588e6d609d95d8cd491492ed420</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Kernel</name>
      <anchorfile>classOpenMM_1_1Kernel.html</anchorfile>
      <anchor>a02a6120b4d386cfe5b1b574a741c4db5</anchor>
      <arglist>(const Kernel &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Kernel</name>
      <anchorfile>classOpenMM_1_1Kernel.html</anchorfile>
      <anchor>a3dcb03991bf1a79eec1925f73123aa84</anchor>
      <arglist>(KernelImpl *impl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Kernel</name>
      <anchorfile>classOpenMM_1_1Kernel.html</anchorfile>
      <anchor>a00edfda44e9c85e50370a302a8fe8558</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Kernel &amp;</type>
      <name>operator=</name>
      <anchorfile>classOpenMM_1_1Kernel.html</anchorfile>
      <anchor>a1ca119af2cb88c8ce6abd35df7985f8d</anchor>
      <arglist>(const Kernel &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>classOpenMM_1_1Kernel.html</anchorfile>
      <anchor>a5e164ba33b1dfc211559756aa5d486c0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const KernelImpl &amp;</type>
      <name>getImpl</name>
      <anchorfile>classOpenMM_1_1Kernel.html</anchorfile>
      <anchor>ac9fd118499c44fe7e7189b6e2a9d1bdf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>KernelImpl &amp;</type>
      <name>getImpl</name>
      <anchorfile>classOpenMM_1_1Kernel.html</anchorfile>
      <anchor>a7f52dd31b5ba7c491a5d49f1c38ea9c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>getAs</name>
      <anchorfile>classOpenMM_1_1Kernel.html</anchorfile>
      <anchor>a15c65b2fe3f3ad1bbb3127ad9b84d471</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>getAs</name>
      <anchorfile>classOpenMM_1_1Kernel.html</anchorfile>
      <anchor>a458fbc0b5f35569c85f38c7561f0ab82</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::KernelFactory</name>
    <filename>classOpenMM_1_1KernelFactory.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual KernelImpl *</type>
      <name>createKernelImpl</name>
      <anchorfile>classOpenMM_1_1KernelFactory.html</anchorfile>
      <anchor>a6725fd4766718b1da9c55eb8406895ae</anchor>
      <arglist>(std::string name, const Platform &amp;platform, ContextImpl &amp;context) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KernelFactory</name>
      <anchorfile>classOpenMM_1_1KernelFactory.html</anchorfile>
      <anchor>a65199c8de5d7e8930498f3e1ceab6691</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::KernelImpl</name>
    <filename>classOpenMM_1_1KernelImpl.html</filename>
    <member kind="function">
      <type></type>
      <name>KernelImpl</name>
      <anchorfile>classOpenMM_1_1KernelImpl.html</anchorfile>
      <anchor>ac09428ee97f551559a68dc5263a8d326</anchor>
      <arglist>(std::string name, const Platform &amp;platform)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~KernelImpl</name>
      <anchorfile>classOpenMM_1_1KernelImpl.html</anchorfile>
      <anchor>a5f786e9103e3c0390749cd1acaf793ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getName</name>
      <anchorfile>classOpenMM_1_1KernelImpl.html</anchorfile>
      <anchor>a33957ff81d96d5eb86be59fea5034afd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Platform &amp;</type>
      <name>getPlatform</name>
      <anchorfile>classOpenMM_1_1KernelImpl.html</anchorfile>
      <anchor>acca12ce0cccb3112794e9c85389075a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Kernel</name>
      <anchorfile>classOpenMM_1_1KernelImpl.html</anchorfile>
      <anchor>a3807a3ebd0e05ca8cb4d928025a943d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::LangevinIntegrator</name>
    <filename>classOpenMM_1_1LangevinIntegrator.html</filename>
    <base>OpenMM::Integrator</base>
    <member kind="function">
      <type></type>
      <name>LangevinIntegrator</name>
      <anchorfile>classOpenMM_1_1LangevinIntegrator.html</anchorfile>
      <anchor>a10b676a63b851d32f9a093fba312dfdd</anchor>
      <arglist>(double temperature, double frictionCoeff, double stepSize)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTemperature</name>
      <anchorfile>classOpenMM_1_1LangevinIntegrator.html</anchorfile>
      <anchor>a00d75976e31278340ed5550e9f1479da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTemperature</name>
      <anchorfile>classOpenMM_1_1LangevinIntegrator.html</anchorfile>
      <anchor>a0eaab969662d838cfb0528a4e5cf7e13</anchor>
      <arglist>(double temp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFriction</name>
      <anchorfile>classOpenMM_1_1LangevinIntegrator.html</anchorfile>
      <anchor>aeef3b48c4eab3044c61869b3a521f32f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFriction</name>
      <anchorfile>classOpenMM_1_1LangevinIntegrator.html</anchorfile>
      <anchor>a68359308309527032c014d7151ac69c9</anchor>
      <arglist>(double coeff)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRandomNumberSeed</name>
      <anchorfile>classOpenMM_1_1LangevinIntegrator.html</anchorfile>
      <anchor>a9f6f1c1064d592c1594696615078e526</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomNumberSeed</name>
      <anchorfile>classOpenMM_1_1LangevinIntegrator.html</anchorfile>
      <anchor>a6e57a6072a3913e039c5f2da591d7f96</anchor>
      <arglist>(int seed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classOpenMM_1_1LangevinIntegrator.html</anchorfile>
      <anchor>a670ab49c98d37df4ffdd814ff6428fc8</anchor>
      <arglist>(int steps)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1LangevinIntegrator.html</anchorfile>
      <anchor>a941fcc46a4e6e1fed160f03aa6cb04a5</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cleanup</name>
      <anchorfile>classOpenMM_1_1LangevinIntegrator.html</anchorfile>
      <anchor>a4b66d5e31b5dc18b314c8a68163263bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1LangevinIntegrator.html</anchorfile>
      <anchor>a227682eb0bbe611b36bb6903e4569af0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>computeKineticEnergy</name>
      <anchorfile>classOpenMM_1_1LangevinIntegrator.html</anchorfile>
      <anchor>a34f4fe071710d31af9ea6bfa44c66a84</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::LocalCoordinatesSite</name>
    <filename>classOpenMM_1_1LocalCoordinatesSite.html</filename>
    <base>OpenMM::VirtualSite</base>
    <member kind="function">
      <type></type>
      <name>LocalCoordinatesSite</name>
      <anchorfile>classOpenMM_1_1LocalCoordinatesSite.html</anchorfile>
      <anchor>a27986c10560125b49f66b0a30453b95d</anchor>
      <arglist>(int particle1, int particle2, int particle3, const Vec3 &amp;originWeights, const Vec3 &amp;xWeights, const Vec3 &amp;yWeights, const Vec3 &amp;localPosition)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getOriginWeights</name>
      <anchorfile>classOpenMM_1_1LocalCoordinatesSite.html</anchorfile>
      <anchor>a51de67ad3da9a51776e8c873973bd76c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getXWeights</name>
      <anchorfile>classOpenMM_1_1LocalCoordinatesSite.html</anchorfile>
      <anchor>a169fd571a66ef80237c70b5addb1dd4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getYWeights</name>
      <anchorfile>classOpenMM_1_1LocalCoordinatesSite.html</anchorfile>
      <anchor>aaf989234012c88263c9cba5b2f1c0b0e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getLocalPosition</name>
      <anchorfile>classOpenMM_1_1LocalCoordinatesSite.html</anchorfile>
      <anchor>a3690d3de504ae8a8f4f2197e12b22249</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VirtualSite</name>
      <anchorfile>classOpenMM_1_1VirtualSite.html</anchorfile>
      <anchor>af32ceaf9c5e53560493d00108fd23e61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumParticles</name>
      <anchorfile>classOpenMM_1_1VirtualSite.html</anchorfile>
      <anchor>abb6f8d8c14d432090000f19e8beafa99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getParticle</name>
      <anchorfile>classOpenMM_1_1VirtualSite.html</anchorfile>
      <anchor>a3574861bce4fc8bc849f6f23c74ce630</anchor>
      <arglist>(int particle) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>VirtualSite</name>
      <anchorfile>classOpenMM_1_1VirtualSite.html</anchorfile>
      <anchor>ae2cebbf8ffefd3da4086bcf33505f2a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setParticles</name>
      <anchorfile>classOpenMM_1_1VirtualSite.html</anchorfile>
      <anchor>ad3ca2daaa916c80122c2856041d5e2d9</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;particleIndices)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::LocalEnergyMinimizer</name>
    <filename>classOpenMM_1_1LocalEnergyMinimizer.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>minimize</name>
      <anchorfile>classOpenMM_1_1LocalEnergyMinimizer.html</anchorfile>
      <anchor>a9f9431d29f4722859cb47130e54780ee</anchor>
      <arglist>(Context &amp;context, double tolerance=10, int maxIterations=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::MonteCarloAnisotropicBarostat</name>
    <filename>classOpenMM_1_1MonteCarloAnisotropicBarostat.html</filename>
    <base>OpenMM::Force</base>
    <member kind="function">
      <type></type>
      <name>MonteCarloAnisotropicBarostat</name>
      <anchorfile>classOpenMM_1_1MonteCarloAnisotropicBarostat.html</anchorfile>
      <anchor>ab8441778fa92f96a5c0a0371e965fdbe</anchor>
      <arglist>(const Vec3 &amp;defaultPressure, double temperature, bool scaleX=true, bool scaleY=true, bool scaleZ=true, int frequency=25)</arglist>
    </member>
    <member kind="function">
      <type>const Vec3 &amp;</type>
      <name>getDefaultPressure</name>
      <anchorfile>classOpenMM_1_1MonteCarloAnisotropicBarostat.html</anchorfile>
      <anchor>ab93f55a6d1025735f83d1be538ad74a1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultPressure</name>
      <anchorfile>classOpenMM_1_1MonteCarloAnisotropicBarostat.html</anchorfile>
      <anchor>a8477cf93bb0e2306934324dac86383c0</anchor>
      <arglist>(const Vec3 &amp;pressure)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getScaleX</name>
      <anchorfile>classOpenMM_1_1MonteCarloAnisotropicBarostat.html</anchorfile>
      <anchor>a67dea269054174bf25e97215f92e7cdd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getScaleY</name>
      <anchorfile>classOpenMM_1_1MonteCarloAnisotropicBarostat.html</anchorfile>
      <anchor>a607ebc9ebe1b07520495202d09c38501</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getScaleZ</name>
      <anchorfile>classOpenMM_1_1MonteCarloAnisotropicBarostat.html</anchorfile>
      <anchor>a15aeed03124040de189e35e09727ba7d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFrequency</name>
      <anchorfile>classOpenMM_1_1MonteCarloAnisotropicBarostat.html</anchorfile>
      <anchor>af2c1e36972f8bac2b133e9148b51b268</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrequency</name>
      <anchorfile>classOpenMM_1_1MonteCarloAnisotropicBarostat.html</anchorfile>
      <anchor>ae2dd14a3c0cfc0376dbac59c2d7e56b7</anchor>
      <arglist>(int freq)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTemperature</name>
      <anchorfile>classOpenMM_1_1MonteCarloAnisotropicBarostat.html</anchorfile>
      <anchor>a00d75976e31278340ed5550e9f1479da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTemperature</name>
      <anchorfile>classOpenMM_1_1MonteCarloAnisotropicBarostat.html</anchorfile>
      <anchor>a0eaab969662d838cfb0528a4e5cf7e13</anchor>
      <arglist>(double temp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRandomNumberSeed</name>
      <anchorfile>classOpenMM_1_1MonteCarloAnisotropicBarostat.html</anchorfile>
      <anchor>a9f6f1c1064d592c1594696615078e526</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomNumberSeed</name>
      <anchorfile>classOpenMM_1_1MonteCarloAnisotropicBarostat.html</anchorfile>
      <anchor>a6e57a6072a3913e039c5f2da591d7f96</anchor>
      <arglist>(int seed)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1MonteCarloAnisotropicBarostat.html</anchorfile>
      <anchor>a392efd6ce97bb75e8544b94c94bc08bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>PressureX</name>
      <anchorfile>classOpenMM_1_1MonteCarloAnisotropicBarostat.html</anchorfile>
      <anchor>a0708fdd9eab1920f42d4d9ed3b09eb9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>PressureY</name>
      <anchorfile>classOpenMM_1_1MonteCarloAnisotropicBarostat.html</anchorfile>
      <anchor>a215d4829f076041363b3b78712abbf75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>PressureZ</name>
      <anchorfile>classOpenMM_1_1MonteCarloAnisotropicBarostat.html</anchorfile>
      <anchor>a2f00d06d9de1f499aac6a170b09a98e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1MonteCarloAnisotropicBarostat.html</anchorfile>
      <anchor>ae2504c62b5eed8f5dc13f469d4ed7894</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::MonteCarloBarostat</name>
    <filename>classOpenMM_1_1MonteCarloBarostat.html</filename>
    <base>OpenMM::Force</base>
    <member kind="function">
      <type></type>
      <name>MonteCarloBarostat</name>
      <anchorfile>classOpenMM_1_1MonteCarloBarostat.html</anchorfile>
      <anchor>a566a59be63abf55d614834deaac8c627</anchor>
      <arglist>(double defaultPressure, double temperature, int frequency=25)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDefaultPressure</name>
      <anchorfile>classOpenMM_1_1MonteCarloBarostat.html</anchorfile>
      <anchor>a7c6f9fa17a7b4639ce267e313522a058</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultPressure</name>
      <anchorfile>classOpenMM_1_1MonteCarloBarostat.html</anchorfile>
      <anchor>aefaf80390ad481a33946c6b425fe2a47</anchor>
      <arglist>(double pressure)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFrequency</name>
      <anchorfile>classOpenMM_1_1MonteCarloBarostat.html</anchorfile>
      <anchor>af2c1e36972f8bac2b133e9148b51b268</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrequency</name>
      <anchorfile>classOpenMM_1_1MonteCarloBarostat.html</anchorfile>
      <anchor>ae2dd14a3c0cfc0376dbac59c2d7e56b7</anchor>
      <arglist>(int freq)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTemperature</name>
      <anchorfile>classOpenMM_1_1MonteCarloBarostat.html</anchorfile>
      <anchor>a00d75976e31278340ed5550e9f1479da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTemperature</name>
      <anchorfile>classOpenMM_1_1MonteCarloBarostat.html</anchorfile>
      <anchor>a0eaab969662d838cfb0528a4e5cf7e13</anchor>
      <arglist>(double temp)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRandomNumberSeed</name>
      <anchorfile>classOpenMM_1_1MonteCarloBarostat.html</anchorfile>
      <anchor>a9f6f1c1064d592c1594696615078e526</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomNumberSeed</name>
      <anchorfile>classOpenMM_1_1MonteCarloBarostat.html</anchorfile>
      <anchor>a6e57a6072a3913e039c5f2da591d7f96</anchor>
      <arglist>(int seed)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1MonteCarloBarostat.html</anchorfile>
      <anchor>a392efd6ce97bb75e8544b94c94bc08bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>Pressure</name>
      <anchorfile>classOpenMM_1_1MonteCarloBarostat.html</anchorfile>
      <anchor>a9402576e9d2e189e8069e79fbf709c63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1MonteCarloBarostat.html</anchorfile>
      <anchor>ae2504c62b5eed8f5dc13f469d4ed7894</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::MonteCarloMembraneBarostat</name>
    <filename>classOpenMM_1_1MonteCarloMembraneBarostat.html</filename>
    <base>OpenMM::Force</base>
    <member kind="enumeration">
      <type></type>
      <name>XYMode</name>
      <anchorfile>classOpenMM_1_1MonteCarloMembraneBarostat.html</anchorfile>
      <anchor>a0b86010828aba4311dcabf2a20e31726</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>XYIsotropic</name>
      <anchorfile>classOpenMM_1_1MonteCarloMembraneBarostat.html</anchorfile>
      <anchor>a0b86010828aba4311dcabf2a20e31726aa350ba53f89898c427de6df8420de393</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>XYAnisotropic</name>
      <anchorfile>classOpenMM_1_1MonteCarloMembraneBarostat.html</anchorfile>
      <anchor>a0b86010828aba4311dcabf2a20e31726aaa7a3d60105821c2d7aa9328f078e3b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ZMode</name>
      <anchorfile>classOpenMM_1_1MonteCarloMembraneBarostat.html</anchorfile>
      <anchor>a34c2b8e65ce3c65114ccc0fc5889de7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ZFree</name>
      <anchorfile>classOpenMM_1_1MonteCarloMembraneBarostat.html</anchorfile>
      <anchor>a34c2b8e65ce3c65114ccc0fc5889de7ba019079168d9e2ecf1bc3c9c6d975e57c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ZFixed</name>
      <anchorfile>classOpenMM_1_1MonteCarloMembraneBarostat.html</anchorfile>
      <anchor>a34c2b8e65ce3c65114ccc0fc5889de7bacf5ee04e23d559931791e4c529a76100</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>ConstantVolume</name>
      <anchorfile>classOpenMM_1_1MonteCarloMembraneBarostat.html</anchorfile>
      <anchor>a34c2b8e65ce3c65114ccc0fc5889de7bae192f81835968efe8921810858b618e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MonteCarloMembraneBarostat</name>
      <anchorfile>classOpenMM_1_1MonteCarloMembraneBarostat.html</anchorfile>
      <anchor>a3e675c468402efa887f23222fe854dd8</anchor>
      <arglist>(double defaultPressure, double defaultSurfaceTension, double temperature, XYMode xymode, ZMode zmode, int frequency=25)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDefaultPressure</name>
      <anchorfile>classOpenMM_1_1MonteCarloMembraneBarostat.html</anchorfile>
      <anchor>a7c6f9fa17a7b4639ce267e313522a058</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultPressure</name>
      <anchorfile>classOpenMM_1_1MonteCarloMembraneBarostat.html</anchorfile>
      <anchor>aefaf80390ad481a33946c6b425fe2a47</anchor>
      <arglist>(double pressure)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDefaultSurfaceTension</name>
      <anchorfile>classOpenMM_1_1MonteCarloMembraneBarostat.html</anchorfile>
      <anchor>acefc98d3fc73c3e7830701c271b1a6b8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultSurfaceTension</name>
      <anchorfile>classOpenMM_1_1MonteCarloMembraneBarostat.html</anchorfile>
      <anchor>adec473ea036297f298b36add4eb8f29b</anchor>
      <arglist>(double surfaceTension)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFrequency</name>
      <anchorfile>classOpenMM_1_1MonteCarloMembraneBarostat.html</anchorfile>
      <anchor>af2c1e36972f8bac2b133e9148b51b268</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrequency</name>
      <anchorfile>classOpenMM_1_1MonteCarloMembraneBarostat.html</anchorfile>
      <anchor>ae2dd14a3c0cfc0376dbac59c2d7e56b7</anchor>
      <arglist>(int freq)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTemperature</name>
      <anchorfile>classOpenMM_1_1MonteCarloMembraneBarostat.html</anchorfile>
      <anchor>a00d75976e31278340ed5550e9f1479da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTemperature</name>
      <anchorfile>classOpenMM_1_1MonteCarloMembraneBarostat.html</anchorfile>
      <anchor>a0eaab969662d838cfb0528a4e5cf7e13</anchor>
      <arglist>(double temp)</arglist>
    </member>
    <member kind="function">
      <type>XYMode</type>
      <name>getXYMode</name>
      <anchorfile>classOpenMM_1_1MonteCarloMembraneBarostat.html</anchorfile>
      <anchor>aa488ba7e2725752e6972511fc604585a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setXYMode</name>
      <anchorfile>classOpenMM_1_1MonteCarloMembraneBarostat.html</anchorfile>
      <anchor>a8d5c6f02dfaa0d398b759275d069d12d</anchor>
      <arglist>(XYMode mode)</arglist>
    </member>
    <member kind="function">
      <type>ZMode</type>
      <name>getZMode</name>
      <anchorfile>classOpenMM_1_1MonteCarloMembraneBarostat.html</anchorfile>
      <anchor>abc81504a1738c84b85c8c9c04e8a3f5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZMode</name>
      <anchorfile>classOpenMM_1_1MonteCarloMembraneBarostat.html</anchorfile>
      <anchor>a0491d45d9771ecb7737e60f4c195f74b</anchor>
      <arglist>(ZMode mode)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRandomNumberSeed</name>
      <anchorfile>classOpenMM_1_1MonteCarloMembraneBarostat.html</anchorfile>
      <anchor>a9f6f1c1064d592c1594696615078e526</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomNumberSeed</name>
      <anchorfile>classOpenMM_1_1MonteCarloMembraneBarostat.html</anchorfile>
      <anchor>a6e57a6072a3913e039c5f2da591d7f96</anchor>
      <arglist>(int seed)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1MonteCarloMembraneBarostat.html</anchorfile>
      <anchor>a392efd6ce97bb75e8544b94c94bc08bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>Pressure</name>
      <anchorfile>classOpenMM_1_1MonteCarloMembraneBarostat.html</anchorfile>
      <anchor>a9402576e9d2e189e8069e79fbf709c63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>SurfaceTension</name>
      <anchorfile>classOpenMM_1_1MonteCarloMembraneBarostat.html</anchorfile>
      <anchor>a27428c7306197be4331e2757fe33f48c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1MonteCarloMembraneBarostat.html</anchorfile>
      <anchor>ae2504c62b5eed8f5dc13f469d4ed7894</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::NonbondedForce</name>
    <filename>classOpenMM_1_1NonbondedForce.html</filename>
    <base>OpenMM::Force</base>
    <member kind="enumeration">
      <type></type>
      <name>NonbondedMethod</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>NoCutoff</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390a007d65056b9c2fce5e5549b28e4e2ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CutoffNonPeriodic</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390aa2e57a56c2293e046b2fa2231d6f3d6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>CutoffPeriodic</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390a168a54330e90997ff68501baaaa41ccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Ewald</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390af1eddced98423d324d5f77dbef2baf65</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>PME</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>afa7d9e69832628b8cf72ef628dca7390a6d2e0d14bacd7aea16f4739b89d4b463</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonbondedForce</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>a2f2dcf9de53f8dfccc14e51dd8b30379</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumParticles</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>abb6f8d8c14d432090000f19e8beafa99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumExceptions</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>ada496abdde3091adfe3f6b12eb7fb91d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>NonbondedMethod</type>
      <name>getNonbondedMethod</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>a39b8aa497b6303d1ceaa0c56311f52a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNonbondedMethod</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>a705d5824b99e09178ec842c46681fe66</anchor>
      <arglist>(NonbondedMethod method)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCutoffDistance</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>a5ed4b7977b5b798d0119735dc2a2add6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCutoffDistance</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>aca0f3cbeec7aac67e140f0ed2f67b526</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUseSwitchingFunction</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>a2a77b53c16b69d6b34f840932b5e15aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseSwitchingFunction</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>a03cc7c0d9896228e78e795054ed812b8</anchor>
      <arglist>(bool use)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getSwitchingDistance</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>a90d2f446c6698b8b39570e4b54f84d2d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSwitchingDistance</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>a18648cd06b17b4f1fabb5fa556e6f52d</anchor>
      <arglist>(double distance)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getReactionFieldDielectric</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>a135905a665143f2630f48f4cc10959ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReactionFieldDielectric</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>a58a833182e564d92332d0effb9644791</anchor>
      <arglist>(double dielectric)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getEwaldErrorTolerance</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>a2c0018057264fe973ca77aff480f997a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEwaldErrorTolerance</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>a847ca50353d560e71f9de06af503438b</anchor>
      <arglist>(double tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPMEParameters</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>a486e7aa890acb110c056ee2ca6cbf96a</anchor>
      <arglist>(double &amp;alpha, int &amp;nx, int &amp;ny, int &amp;nz) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPMEParameters</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>a8944e9093a35cdae9d29d8428fd3f615</anchor>
      <arglist>(double alpha, int nx, int ny, int nz)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addParticle</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>aeda141e1e69214c2163e511c13ecfa4b</anchor>
      <arglist>(double charge, double sigma, double epsilon)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getParticleParameters</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>a62e2a2b57badb13521c072a11594c330</anchor>
      <arglist>(int index, double &amp;charge, double &amp;sigma, double &amp;epsilon) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticleParameters</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>a239e17c66a86e784d5172f7e3d760feb</anchor>
      <arglist>(int index, double charge, double sigma, double epsilon)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addException</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>aa71fccf37957165d7ea923b985cbee86</anchor>
      <arglist>(int particle1, int particle2, double chargeProd, double sigma, double epsilon, bool replace=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getExceptionParameters</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>a46d0995f8eef89be0d1fc252793d1965</anchor>
      <arglist>(int index, int &amp;particle1, int &amp;particle2, double &amp;chargeProd, double &amp;sigma, double &amp;epsilon) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExceptionParameters</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>a37aace3c83616e62529aa2969270410c</anchor>
      <arglist>(int index, int particle1, int particle2, double chargeProd, double sigma, double epsilon)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createExceptionsFromBonds</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>af678ee1383c0a86bdd402d4ebd996141</anchor>
      <arglist>(const std::vector&lt; std::pair&lt; int, int &gt; &gt; &amp;bonds, double coulomb14Scale, double lj14Scale)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getUseDispersionCorrection</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>a839b52f41aac7e709c3d68126db75b8e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUseDispersionCorrection</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>aec6d1c5b7ed41eae62c2550f75ac401d</anchor>
      <arglist>(bool useCorrection)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getReciprocalSpaceForceGroup</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>aa6c28a860ce529c19b90afe26ccf9d03</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReciprocalSpaceForceGroup</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>a7d30b8512bba5e105304ef3530e676bb</anchor>
      <arglist>(int group)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateParametersInContext</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>abc3002dd21e2e02a9f9dfee170fa3711</anchor>
      <arglist>(Context &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>a392efd6ce97bb75e8544b94c94bc08bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1NonbondedForce.html</anchorfile>
      <anchor>ae2504c62b5eed8f5dc13f469d4ed7894</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::OpenMMException</name>
    <filename>classOpenMM_1_1OpenMMException.html</filename>
    <member kind="function">
      <type></type>
      <name>OpenMMException</name>
      <anchorfile>classOpenMM_1_1OpenMMException.html</anchorfile>
      <anchor>a719cc9bd2ea397a3a2dc07dbdd356b10</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OpenMMException</name>
      <anchorfile>classOpenMM_1_1OpenMMException.html</anchorfile>
      <anchor>a77ee80155bdd5c8047062ed2880c24ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>classOpenMM_1_1OpenMMException.html</anchorfile>
      <anchor>a586eee248fedb7de1b50219e14b99c7b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::OutOfPlaneSite</name>
    <filename>classOpenMM_1_1OutOfPlaneSite.html</filename>
    <base>OpenMM::VirtualSite</base>
    <member kind="function">
      <type></type>
      <name>OutOfPlaneSite</name>
      <anchorfile>classOpenMM_1_1OutOfPlaneSite.html</anchorfile>
      <anchor>a6eb3deecc5b4f72da9f38f6969d44c0f</anchor>
      <arglist>(int particle1, int particle2, int particle3, double weight12, double weight13, double weightCross)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWeight12</name>
      <anchorfile>classOpenMM_1_1OutOfPlaneSite.html</anchorfile>
      <anchor>a45882850cffa3a64dee00add4510cb6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWeight13</name>
      <anchorfile>classOpenMM_1_1OutOfPlaneSite.html</anchorfile>
      <anchor>af16e9a657befcf10d29c10e466e34924</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWeightCross</name>
      <anchorfile>classOpenMM_1_1OutOfPlaneSite.html</anchorfile>
      <anchor>af80dfcb9b7bc2bd0ec1d0fa288ca3f28</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::PeriodicTorsionForce</name>
    <filename>classOpenMM_1_1PeriodicTorsionForce.html</filename>
    <base>OpenMM::Force</base>
    <member kind="function">
      <type></type>
      <name>PeriodicTorsionForce</name>
      <anchorfile>classOpenMM_1_1PeriodicTorsionForce.html</anchorfile>
      <anchor>acb50452929ed48577c4376cbd78c056d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTorsions</name>
      <anchorfile>classOpenMM_1_1PeriodicTorsionForce.html</anchorfile>
      <anchor>a3bb8e6820ac5baede1973c6bb1fd99aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addTorsion</name>
      <anchorfile>classOpenMM_1_1PeriodicTorsionForce.html</anchorfile>
      <anchor>af31df063a0cba872b463ddcb53e52079</anchor>
      <arglist>(int particle1, int particle2, int particle3, int particle4, int periodicity, double phase, double k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTorsionParameters</name>
      <anchorfile>classOpenMM_1_1PeriodicTorsionForce.html</anchorfile>
      <anchor>aa79e6fb46d314b4694c487c204536d24</anchor>
      <arglist>(int index, int &amp;particle1, int &amp;particle2, int &amp;particle3, int &amp;particle4, int &amp;periodicity, double &amp;phase, double &amp;k) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTorsionParameters</name>
      <anchorfile>classOpenMM_1_1PeriodicTorsionForce.html</anchorfile>
      <anchor>aa35e8c11189971e863944f0b601d51ad</anchor>
      <arglist>(int index, int particle1, int particle2, int particle3, int particle4, int periodicity, double phase, double k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateParametersInContext</name>
      <anchorfile>classOpenMM_1_1PeriodicTorsionForce.html</anchorfile>
      <anchor>abc3002dd21e2e02a9f9dfee170fa3711</anchor>
      <arglist>(Context &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1PeriodicTorsionForce.html</anchorfile>
      <anchor>a392efd6ce97bb75e8544b94c94bc08bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1PeriodicTorsionForce.html</anchorfile>
      <anchor>ae2504c62b5eed8f5dc13f469d4ed7894</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::Platform</name>
    <filename>classOpenMM_1_1Platform.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Platform</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>ac9776566b67c64e4c343b6e6546cb177</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a5d7b0bf125fba4d708903ab3abba2b57</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getSpeed</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a1045a04584dbb532043a64847285c888</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>supportsDoublePrecision</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>aa02bf7000b6d19193ef2ffdd7194b4cb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; std::string &gt; &amp;</type>
      <name>getPropertyNames</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a4b14791069383cc46c49bb2328c56e31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::string &amp;</type>
      <name>getPropertyValue</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>ad651b44ed5aa4f91e20e0ffbbd94cde3</anchor>
      <arglist>(const Context &amp;context, const std::string &amp;property) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPropertyValue</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>adeb20d29ed643cd2555f9f596b6ccc7a</anchor>
      <arglist>(Context &amp;context, const std::string &amp;property, const std::string &amp;value) const </arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPropertyDefaultValue</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>ad78bdc4f4975d84d423d415331324ad6</anchor>
      <arglist>(const std::string &amp;property) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPropertyDefaultValue</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a8fd4f77d0b269cf214b553b630373ee2</anchor>
      <arglist>(const std::string &amp;property, const std::string &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>contextCreated</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a32fda9730d45c8235f37fe5dddf9b0d8</anchor>
      <arglist>(ContextImpl &amp;context, const std::map&lt; std::string, std::string &gt; &amp;properties) const </arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>contextDestroyed</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a79221762a29c1118e8ff77946168a9c4</anchor>
      <arglist>(ContextImpl &amp;context) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>registerKernelFactory</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a76d1db1f96d3161aef7065bd25c1a49d</anchor>
      <arglist>(const std::string &amp;name, KernelFactory *factory)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>supportsKernels</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a354d0de0ba10bbeb6de3e5ec3dedf69e</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;kernelNames) const </arglist>
    </member>
    <member kind="function">
      <type>Kernel</type>
      <name>createKernel</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>ad908c32a7b6e3623e46bed602b6097d2</anchor>
      <arglist>(const std::string &amp;name, ContextImpl &amp;context) const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerPlatform</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>aeba0e1725cf1727c6b4a0490e39b1f9b</anchor>
      <arglist>(Platform *platform)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getNumPlatforms</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a247c6c8ee9b97691f5d0c8ab5865c6d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Platform &amp;</type>
      <name>getPlatform</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a587fe32173fc690d2f5b9f4780ec4d8d</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; std::string &gt;</type>
      <name>getPluginLoadFailures</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>ac607ff01689d6b0836ab09edbff14355</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Platform &amp;</type>
      <name>getPlatformByName</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>abd5c5d3a43a8f875ddb8458ca55a1ee2</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Platform &amp;</type>
      <name>findPlatform</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a5ee62888c11d4fcd65d1d37d12505e4c</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;kernelNames)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>loadPluginLibrary</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>aca490e15cc454a8d698408a7565ca37c</anchor>
      <arglist>(const std::string &amp;file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; std::string &gt;</type>
      <name>loadPluginsFromDirectory</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>ac2f294bbb378209e5666f99db9ee3f97</anchor>
      <arglist>(const std::string &amp;directory)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>getDefaultPluginsDirectory</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a361733729e5a1b63f5b11c133435a8e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>getOpenMMVersion</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a3a4a71844ddbdb2f09ae2e4f8c071bf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ContextImpl &amp;</type>
      <name>getContextImpl</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>ac06cb4edc595e730e4b52010b78a910a</anchor>
      <arglist>(Context &amp;context) const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const ContextImpl &amp;</type>
      <name>getContextImpl</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a3f5713987eef10cdb97f944fff29fc38</anchor>
      <arglist>(const Context &amp;context) const </arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>platformProperties</name>
      <anchorfile>classOpenMM_1_1Platform.html</anchorfile>
      <anchor>a1efc8e2dff4fbbddf744dc6351b7a23f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::RBTorsionForce</name>
    <filename>classOpenMM_1_1RBTorsionForce.html</filename>
    <base>OpenMM::Force</base>
    <member kind="function">
      <type></type>
      <name>RBTorsionForce</name>
      <anchorfile>classOpenMM_1_1RBTorsionForce.html</anchorfile>
      <anchor>a61c23966706ff87a5f81c818f7d2f16d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTorsions</name>
      <anchorfile>classOpenMM_1_1RBTorsionForce.html</anchorfile>
      <anchor>a3bb8e6820ac5baede1973c6bb1fd99aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addTorsion</name>
      <anchorfile>classOpenMM_1_1RBTorsionForce.html</anchorfile>
      <anchor>a7cb868b2b26fe6184eb51de664583a20</anchor>
      <arglist>(int particle1, int particle2, int particle3, int particle4, double c0, double c1, double c2, double c3, double c4, double c5)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getTorsionParameters</name>
      <anchorfile>classOpenMM_1_1RBTorsionForce.html</anchorfile>
      <anchor>af9a006c6cff2e1d2824a0badcb836c62</anchor>
      <arglist>(int index, int &amp;particle1, int &amp;particle2, int &amp;particle3, int &amp;particle4, double &amp;c0, double &amp;c1, double &amp;c2, double &amp;c3, double &amp;c4, double &amp;c5) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTorsionParameters</name>
      <anchorfile>classOpenMM_1_1RBTorsionForce.html</anchorfile>
      <anchor>a4d7aa648a4934863b8818d9261cffd80</anchor>
      <arglist>(int index, int particle1, int particle2, int particle3, int particle4, double c0, double c1, double c2, double c3, double c4, double c5)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateParametersInContext</name>
      <anchorfile>classOpenMM_1_1RBTorsionForce.html</anchorfile>
      <anchor>abc3002dd21e2e02a9f9dfee170fa3711</anchor>
      <arglist>(Context &amp;context)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1RBTorsionForce.html</anchorfile>
      <anchor>a392efd6ce97bb75e8544b94c94bc08bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1RBTorsionForce.html</anchorfile>
      <anchor>ae2504c62b5eed8f5dc13f469d4ed7894</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::RPMDIntegrator</name>
    <filename>classOpenMM_1_1RPMDIntegrator.html</filename>
    <base>OpenMM::Integrator</base>
    <member kind="function">
      <type></type>
      <name>RPMDIntegrator</name>
      <anchorfile>classOpenMM_1_1RPMDIntegrator.html</anchorfile>
      <anchor>a1b28fca0765cc2ad3594dd3850aac6d9</anchor>
      <arglist>(int numCopies, double temperature, double frictionCoeff, double stepSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RPMDIntegrator</name>
      <anchorfile>classOpenMM_1_1RPMDIntegrator.html</anchorfile>
      <anchor>ae6f927ab3bb3a006da11ea8d2ebc88b5</anchor>
      <arglist>(int numCopies, double temperature, double frictionCoeff, double stepSize, const std::map&lt; int, int &gt; &amp;contractions)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumCopies</name>
      <anchorfile>classOpenMM_1_1RPMDIntegrator.html</anchorfile>
      <anchor>a1fc884714f9306a6a27327153a43ff4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTemperature</name>
      <anchorfile>classOpenMM_1_1RPMDIntegrator.html</anchorfile>
      <anchor>a00d75976e31278340ed5550e9f1479da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTemperature</name>
      <anchorfile>classOpenMM_1_1RPMDIntegrator.html</anchorfile>
      <anchor>a0eaab969662d838cfb0528a4e5cf7e13</anchor>
      <arglist>(double temp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFriction</name>
      <anchorfile>classOpenMM_1_1RPMDIntegrator.html</anchorfile>
      <anchor>aeef3b48c4eab3044c61869b3a521f32f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFriction</name>
      <anchorfile>classOpenMM_1_1RPMDIntegrator.html</anchorfile>
      <anchor>a68359308309527032c014d7151ac69c9</anchor>
      <arglist>(double coeff)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getApplyThermostat</name>
      <anchorfile>classOpenMM_1_1RPMDIntegrator.html</anchorfile>
      <anchor>a6a4784857b5b01eb2b7ae779feaa686a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setApplyThermostat</name>
      <anchorfile>classOpenMM_1_1RPMDIntegrator.html</anchorfile>
      <anchor>a4cee58eeabe21002163bd3b6b242008a</anchor>
      <arglist>(bool apply)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRandomNumberSeed</name>
      <anchorfile>classOpenMM_1_1RPMDIntegrator.html</anchorfile>
      <anchor>a9f6f1c1064d592c1594696615078e526</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomNumberSeed</name>
      <anchorfile>classOpenMM_1_1RPMDIntegrator.html</anchorfile>
      <anchor>a6e57a6072a3913e039c5f2da591d7f96</anchor>
      <arglist>(int seed)</arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; int, int &gt; &amp;</type>
      <name>getContractions</name>
      <anchorfile>classOpenMM_1_1RPMDIntegrator.html</anchorfile>
      <anchor>a380504d80bca884ca3b795b98188389d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPositions</name>
      <anchorfile>classOpenMM_1_1RPMDIntegrator.html</anchorfile>
      <anchor>a1ffce0bc325568fa8ddc601a3076e3a3</anchor>
      <arglist>(int copy, const std::vector&lt; Vec3 &gt; &amp;positions)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVelocities</name>
      <anchorfile>classOpenMM_1_1RPMDIntegrator.html</anchorfile>
      <anchor>aab37d6affcf76544b5d19f7462eb1ece</anchor>
      <arglist>(int copy, const std::vector&lt; Vec3 &gt; &amp;velocities)</arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>getState</name>
      <anchorfile>classOpenMM_1_1RPMDIntegrator.html</anchorfile>
      <anchor>a4a37805f4ebeb743876faa992d954656</anchor>
      <arglist>(int copy, int types, bool enforcePeriodicBox=false, int groups=0xFFFFFFFF)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTotalEnergy</name>
      <anchorfile>classOpenMM_1_1RPMDIntegrator.html</anchorfile>
      <anchor>ade6f819c1ff13755802531686b3f8001</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classOpenMM_1_1RPMDIntegrator.html</anchorfile>
      <anchor>a670ab49c98d37df4ffdd814ff6428fc8</anchor>
      <arglist>(int steps)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1RPMDIntegrator.html</anchorfile>
      <anchor>a941fcc46a4e6e1fed160f03aa6cb04a5</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cleanup</name>
      <anchorfile>classOpenMM_1_1RPMDIntegrator.html</anchorfile>
      <anchor>a4b66d5e31b5dc18b314c8a68163263bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>stateChanged</name>
      <anchorfile>classOpenMM_1_1RPMDIntegrator.html</anchorfile>
      <anchor>ad8e72eb830cf0f4b2365aec4a7cc475d</anchor>
      <arglist>(State::DataType changed)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1RPMDIntegrator.html</anchorfile>
      <anchor>a227682eb0bbe611b36bb6903e4569af0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>computeKineticEnergy</name>
      <anchorfile>classOpenMM_1_1RPMDIntegrator.html</anchorfile>
      <anchor>a34f4fe071710d31af9ea6bfa44c66a84</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::RPMDMonteCarloBarostat</name>
    <filename>classOpenMM_1_1RPMDMonteCarloBarostat.html</filename>
    <base>OpenMM::Force</base>
    <member kind="function">
      <type></type>
      <name>RPMDMonteCarloBarostat</name>
      <anchorfile>classOpenMM_1_1RPMDMonteCarloBarostat.html</anchorfile>
      <anchor>a31cb349729069a3b180dcb773fcd14cf</anchor>
      <arglist>(double defaultPressure, int frequency=25)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDefaultPressure</name>
      <anchorfile>classOpenMM_1_1RPMDMonteCarloBarostat.html</anchorfile>
      <anchor>a7c6f9fa17a7b4639ce267e313522a058</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultPressure</name>
      <anchorfile>classOpenMM_1_1RPMDMonteCarloBarostat.html</anchorfile>
      <anchor>aefaf80390ad481a33946c6b425fe2a47</anchor>
      <arglist>(double pressure)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getFrequency</name>
      <anchorfile>classOpenMM_1_1RPMDMonteCarloBarostat.html</anchorfile>
      <anchor>af2c1e36972f8bac2b133e9148b51b268</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrequency</name>
      <anchorfile>classOpenMM_1_1RPMDMonteCarloBarostat.html</anchorfile>
      <anchor>ae2dd14a3c0cfc0376dbac59c2d7e56b7</anchor>
      <arglist>(int freq)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRandomNumberSeed</name>
      <anchorfile>classOpenMM_1_1RPMDMonteCarloBarostat.html</anchorfile>
      <anchor>a9f6f1c1064d592c1594696615078e526</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomNumberSeed</name>
      <anchorfile>classOpenMM_1_1RPMDMonteCarloBarostat.html</anchorfile>
      <anchor>a6e57a6072a3913e039c5f2da591d7f96</anchor>
      <arglist>(int seed)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1RPMDMonteCarloBarostat.html</anchorfile>
      <anchor>a392efd6ce97bb75e8544b94c94bc08bb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string &amp;</type>
      <name>Pressure</name>
      <anchorfile>classOpenMM_1_1RPMDMonteCarloBarostat.html</anchorfile>
      <anchor>a9402576e9d2e189e8069e79fbf709c63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ForceImpl *</type>
      <name>createImpl</name>
      <anchorfile>classOpenMM_1_1RPMDMonteCarloBarostat.html</anchorfile>
      <anchor>ae2504c62b5eed8f5dc13f469d4ed7894</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::RPMDUpdater</name>
    <filename>classOpenMM_1_1RPMDUpdater.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>updateRPMDState</name>
      <anchorfile>classOpenMM_1_1RPMDUpdater.html</anchorfile>
      <anchor>ae388953a0d535c560666f4b0bf47835a</anchor>
      <arglist>(ContextImpl &amp;context)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::State</name>
    <filename>classOpenMM_1_1State.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>DataType</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>ad8ed01ff3ff33333d8e19db4d2818bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Positions</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>ad8ed01ff3ff33333d8e19db4d2818bb6af9105fa5840837921d8fc9be42f93b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Velocities</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>ad8ed01ff3ff33333d8e19db4d2818bb6a2454a9d7199365988fad941b7973f3ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Forces</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>ad8ed01ff3ff33333d8e19db4d2818bb6a596e16b0fa39ac621d7e51fa07fad38d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Energy</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>ad8ed01ff3ff33333d8e19db4d2818bb6a52549afe87628ebdafaca441e36d0f54</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <type>@</type>
      <name>Parameters</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>ad8ed01ff3ff33333d8e19db4d2818bb6a19cf4b69b8d66e6a642673baa60d9a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>State</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>a790355057d12e9c1ce7643551c16fecd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTime</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>a438aa7c8c22ebadc95b00bcae18ef20e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Vec3 &gt; &amp;</type>
      <name>getPositions</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>af08eb5f8f587f66749a68a7f44644823</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Vec3 &gt; &amp;</type>
      <name>getVelocities</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>a771106a51b158c2ef5433a89f49b0eb5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Vec3 &gt; &amp;</type>
      <name>getForces</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>a0942f0190f5dab5da366c59ad1e073c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getKineticEnergy</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>a15194533d2278967449e3b05df9bcd1c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPotentialEnergy</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>a59a0566836acf8d2e39508a605921d01</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getPeriodicBoxVectors</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>a3baf8c5038aca429ff3cc2fc3bcca48e</anchor>
      <arglist>(Vec3 &amp;a, Vec3 &amp;b, Vec3 &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getPeriodicBoxVolume</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>aad9d839c8129aa882d95ea05be535d30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const std::map&lt; std::string, double &gt; &amp;</type>
      <name>getParameters</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>a5c2d6cd821539589a050f9c33bfb44ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDataTypes</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>a12f32a3f2eb6a3766684a8866c5a3cdd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StateBuilder</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>aa6c46749558c5c71f66de6c2bbb0b11b</anchor>
      <arglist>(double time)</arglist>
    </member>
    <member kind="function">
      <type>State</type>
      <name>getState</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>a152dc616de78994a45ef436f72a5ced6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPositions</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>ab641b0083e0f7779c3726a37a4489978</anchor>
      <arglist>(const std::vector&lt; Vec3 &gt; &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVelocities</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>af581e01de9c8776e47ade8dfd9666f69</anchor>
      <arglist>(const std::vector&lt; Vec3 &gt; &amp;vel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setForces</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>ac066ab178df32aac14e8f5cc7f5904cf</anchor>
      <arglist>(const std::vector&lt; Vec3 &gt; &amp;force)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParameters</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>a4225f56eef8012c9e5385a935fe4698f</anchor>
      <arglist>(const std::map&lt; std::string, double &gt; &amp;params)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnergy</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>afddbbdbed9ae662b4be3cfa44d6183c1</anchor>
      <arglist>(double ke, double pe)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPeriodicBoxVectors</name>
      <anchorfile>classOpenMM_1_1State.html</anchorfile>
      <anchor>a62fcc50a2c34ff28de9667aabf5ec33f</anchor>
      <arglist>(const Vec3 &amp;a, const Vec3 &amp;b, const Vec3 &amp;c)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::System</name>
    <filename>classOpenMM_1_1System.html</filename>
    <member kind="function">
      <type></type>
      <name>System</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>aa99f92b482c36f6e72a05b28c3d6f748</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~System</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>a3bfbca0e3ddd7ea1f8709c986454d753</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumParticles</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>abb6f8d8c14d432090000f19e8beafa99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addParticle</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>af2fc831bbb8f24c17001fd3a52b6f605</anchor>
      <arglist>(double mass)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getParticleMass</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>a10bd04997d60a3f139b670f7c6ee4182</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setParticleMass</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>a28a61e8e79b6176590696f0d1e6a6f01</anchor>
      <arglist>(int index, double mass)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVirtualSite</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>ac3864c4e330f9c48488a5e2725de6f96</anchor>
      <arglist>(int index, VirtualSite *virtualSite)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVirtualSite</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>acec330e19b256bea20b4ae4bd164e8ae</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>const VirtualSite &amp;</type>
      <name>getVirtualSite</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>a3574532629075a26bb32258d805919a2</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumConstraints</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>a8a2f3b092ceea43bf47e68c238626e4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addConstraint</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>a3f6c85aca31da39b1453c5d8b4f7f6a2</anchor>
      <arglist>(int particle1, int particle2, double distance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getConstraintParameters</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>a80e1823375f88f37cdc37c4a7c88308a</anchor>
      <arglist>(int index, int &amp;particle1, int &amp;particle2, double &amp;distance) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setConstraintParameters</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>a06f7ea00d1bc0de5d4421255de4a6dff</anchor>
      <arglist>(int index, int particle1, int particle2, double distance)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeConstraint</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>a35232cd1ca0b83a0771aa3227a4953fc</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addForce</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>a0ef8fa07d1bb205c0fefc28c9d6b5281</anchor>
      <arglist>(Force *force)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumForces</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>a182de328de797b16841c953a5a725d39</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>const Force &amp;</type>
      <name>getForce</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>a4f1ab7ae1a90ee6ff684f4cdf12ed1ec</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>Force &amp;</type>
      <name>getForce</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>af841d03c4214a0bb49cc0dd9806a419e</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeForce</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>a5e3d5d5dba7d4a27e0b92e958c11eea3</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getDefaultPeriodicBoxVectors</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>a863d996e748c6233ad068e43deeab219</anchor>
      <arglist>(Vec3 &amp;a, Vec3 &amp;b, Vec3 &amp;c) const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultPeriodicBoxVectors</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>a89231a9c395633cb25a72d4168915b4d</anchor>
      <arglist>(const Vec3 &amp;a, const Vec3 &amp;b, const Vec3 &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesPeriodicBoundaryConditions</name>
      <anchorfile>classOpenMM_1_1System.html</anchorfile>
      <anchor>a0e1d5d45488787af046f6fbbff97a82c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::TabulatedFunction</name>
    <filename>classOpenMM_1_1TabulatedFunction.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual TabulatedFunction *</type>
      <name>Copy</name>
      <anchorfile>classOpenMM_1_1TabulatedFunction.html</anchorfile>
      <anchor>ad3195e0dfecd444dce2335cf1428cf66</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::ThreeParticleAverageSite</name>
    <filename>classOpenMM_1_1ThreeParticleAverageSite.html</filename>
    <base>OpenMM::VirtualSite</base>
    <member kind="function">
      <type></type>
      <name>ThreeParticleAverageSite</name>
      <anchorfile>classOpenMM_1_1ThreeParticleAverageSite.html</anchorfile>
      <anchor>a838df882ad3722e808984e35100cf931</anchor>
      <arglist>(int particle1, int particle2, int particle3, double weight1, double weight2, double weight3)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWeight</name>
      <anchorfile>classOpenMM_1_1ThreeParticleAverageSite.html</anchorfile>
      <anchor>ac6e23479f2a71c24e8396b726e44d671</anchor>
      <arglist>(int particle) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::TwoParticleAverageSite</name>
    <filename>classOpenMM_1_1TwoParticleAverageSite.html</filename>
    <base>OpenMM::VirtualSite</base>
    <member kind="function">
      <type></type>
      <name>TwoParticleAverageSite</name>
      <anchorfile>classOpenMM_1_1TwoParticleAverageSite.html</anchorfile>
      <anchor>a42015bfc58d5593514faf069943a2f58</anchor>
      <arglist>(int particle1, int particle2, double weight1, double weight2)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWeight</name>
      <anchorfile>classOpenMM_1_1TwoParticleAverageSite.html</anchorfile>
      <anchor>ac6e23479f2a71c24e8396b726e44d671</anchor>
      <arglist>(int particle) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::VariableLangevinIntegrator</name>
    <filename>classOpenMM_1_1VariableLangevinIntegrator.html</filename>
    <base>OpenMM::Integrator</base>
    <member kind="function">
      <type></type>
      <name>VariableLangevinIntegrator</name>
      <anchorfile>classOpenMM_1_1VariableLangevinIntegrator.html</anchorfile>
      <anchor>aa5b4f43a19d837102ba1c312b577ad10</anchor>
      <arglist>(double temperature, double frictionCoeff, double errorTol)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getTemperature</name>
      <anchorfile>classOpenMM_1_1VariableLangevinIntegrator.html</anchorfile>
      <anchor>a00d75976e31278340ed5550e9f1479da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTemperature</name>
      <anchorfile>classOpenMM_1_1VariableLangevinIntegrator.html</anchorfile>
      <anchor>a0eaab969662d838cfb0528a4e5cf7e13</anchor>
      <arglist>(double temp)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFriction</name>
      <anchorfile>classOpenMM_1_1VariableLangevinIntegrator.html</anchorfile>
      <anchor>aeef3b48c4eab3044c61869b3a521f32f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFriction</name>
      <anchorfile>classOpenMM_1_1VariableLangevinIntegrator.html</anchorfile>
      <anchor>a68359308309527032c014d7151ac69c9</anchor>
      <arglist>(double coeff)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getErrorTolerance</name>
      <anchorfile>classOpenMM_1_1VariableLangevinIntegrator.html</anchorfile>
      <anchor>a0f3200908f07a9b4e8b5393e8683d79e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setErrorTolerance</name>
      <anchorfile>classOpenMM_1_1VariableLangevinIntegrator.html</anchorfile>
      <anchor>a754ecd536727fceaf9f8b972e0bd1a22</anchor>
      <arglist>(double tol)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRandomNumberSeed</name>
      <anchorfile>classOpenMM_1_1VariableLangevinIntegrator.html</anchorfile>
      <anchor>a9f6f1c1064d592c1594696615078e526</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRandomNumberSeed</name>
      <anchorfile>classOpenMM_1_1VariableLangevinIntegrator.html</anchorfile>
      <anchor>a6e57a6072a3913e039c5f2da591d7f96</anchor>
      <arglist>(int seed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classOpenMM_1_1VariableLangevinIntegrator.html</anchorfile>
      <anchor>a670ab49c98d37df4ffdd814ff6428fc8</anchor>
      <arglist>(int steps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stepTo</name>
      <anchorfile>classOpenMM_1_1VariableLangevinIntegrator.html</anchorfile>
      <anchor>a6d57b943a53b497d973a320eac09a10c</anchor>
      <arglist>(double time)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1VariableLangevinIntegrator.html</anchorfile>
      <anchor>a941fcc46a4e6e1fed160f03aa6cb04a5</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cleanup</name>
      <anchorfile>classOpenMM_1_1VariableLangevinIntegrator.html</anchorfile>
      <anchor>a4b66d5e31b5dc18b314c8a68163263bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1VariableLangevinIntegrator.html</anchorfile>
      <anchor>a227682eb0bbe611b36bb6903e4569af0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>computeKineticEnergy</name>
      <anchorfile>classOpenMM_1_1VariableLangevinIntegrator.html</anchorfile>
      <anchor>a34f4fe071710d31af9ea6bfa44c66a84</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::VariableVerletIntegrator</name>
    <filename>classOpenMM_1_1VariableVerletIntegrator.html</filename>
    <base>OpenMM::Integrator</base>
    <member kind="function">
      <type></type>
      <name>VariableVerletIntegrator</name>
      <anchorfile>classOpenMM_1_1VariableVerletIntegrator.html</anchorfile>
      <anchor>af7fe841dd2aba3201a6eef532bc16f52</anchor>
      <arglist>(double errorTol)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getErrorTolerance</name>
      <anchorfile>classOpenMM_1_1VariableVerletIntegrator.html</anchorfile>
      <anchor>a0f3200908f07a9b4e8b5393e8683d79e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setErrorTolerance</name>
      <anchorfile>classOpenMM_1_1VariableVerletIntegrator.html</anchorfile>
      <anchor>a754ecd536727fceaf9f8b972e0bd1a22</anchor>
      <arglist>(double tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classOpenMM_1_1VariableVerletIntegrator.html</anchorfile>
      <anchor>a670ab49c98d37df4ffdd814ff6428fc8</anchor>
      <arglist>(int steps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stepTo</name>
      <anchorfile>classOpenMM_1_1VariableVerletIntegrator.html</anchorfile>
      <anchor>a6d57b943a53b497d973a320eac09a10c</anchor>
      <arglist>(double time)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1VariableVerletIntegrator.html</anchorfile>
      <anchor>a941fcc46a4e6e1fed160f03aa6cb04a5</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cleanup</name>
      <anchorfile>classOpenMM_1_1VariableVerletIntegrator.html</anchorfile>
      <anchor>a4b66d5e31b5dc18b314c8a68163263bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1VariableVerletIntegrator.html</anchorfile>
      <anchor>a227682eb0bbe611b36bb6903e4569af0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>computeKineticEnergy</name>
      <anchorfile>classOpenMM_1_1VariableVerletIntegrator.html</anchorfile>
      <anchor>a34f4fe071710d31af9ea6bfa44c66a84</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::Vec3</name>
    <filename>classOpenMM_1_1Vec3.html</filename>
    <member kind="function">
      <type></type>
      <name>Vec3</name>
      <anchorfile>classOpenMM_1_1Vec3.html</anchorfile>
      <anchor>a9776ee60566203dbcdc410d8a28edfce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vec3</name>
      <anchorfile>classOpenMM_1_1Vec3.html</anchorfile>
      <anchor>ad815a2cb1433c4508a450d9a791fc5c8</anchor>
      <arglist>(double x, double y, double z)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>operator[]</name>
      <anchorfile>classOpenMM_1_1Vec3.html</anchorfile>
      <anchor>a8e49d387cc3f18022daaebf5fe2035e3</anchor>
      <arglist>(int index) const </arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator[]</name>
      <anchorfile>classOpenMM_1_1Vec3.html</anchorfile>
      <anchor>a78dc86d75ae6a17d5b35762d60c7bfbd</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classOpenMM_1_1Vec3.html</anchorfile>
      <anchor>a4e93267e644920d6926c6568c5784748</anchor>
      <arglist>(const Vec3 &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classOpenMM_1_1Vec3.html</anchorfile>
      <anchor>a85dc0c8426ce5ce4d7d57e75c03d2a87</anchor>
      <arglist>(const Vec3 &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>operator+</name>
      <anchorfile>classOpenMM_1_1Vec3.html</anchorfile>
      <anchor>ac5e36ce5791860be81e941f570c72b10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>operator+</name>
      <anchorfile>classOpenMM_1_1Vec3.html</anchorfile>
      <anchor>afff07dc0407252f19cf560d3132bd63b</anchor>
      <arglist>(const Vec3 &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3 &amp;</type>
      <name>operator+=</name>
      <anchorfile>classOpenMM_1_1Vec3.html</anchorfile>
      <anchor>ace98f21186feb162581c4bf06685aa1f</anchor>
      <arglist>(const Vec3 &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>operator-</name>
      <anchorfile>classOpenMM_1_1Vec3.html</anchorfile>
      <anchor>a704ee3e7085c76db0352e51e4103dbae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>operator-</name>
      <anchorfile>classOpenMM_1_1Vec3.html</anchorfile>
      <anchor>add887bb383d6e340995e4aa4966d0bdb</anchor>
      <arglist>(const Vec3 &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3 &amp;</type>
      <name>operator-=</name>
      <anchorfile>classOpenMM_1_1Vec3.html</anchorfile>
      <anchor>a6d3315d4fd7ebe3463a5b363ea382ab2</anchor>
      <arglist>(const Vec3 &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>operator*</name>
      <anchorfile>classOpenMM_1_1Vec3.html</anchorfile>
      <anchor>a904ac1c1b95b3de23aed71cf2cd36020</anchor>
      <arglist>(double rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3 &amp;</type>
      <name>operator*=</name>
      <anchorfile>classOpenMM_1_1Vec3.html</anchorfile>
      <anchor>a60454d6b0d61add92e238268ef0f0d8d</anchor>
      <arglist>(double rhs)</arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>operator/</name>
      <anchorfile>classOpenMM_1_1Vec3.html</anchorfile>
      <anchor>ac670fe589493e56601d99e48f556cea3</anchor>
      <arglist>(double rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3 &amp;</type>
      <name>operator/=</name>
      <anchorfile>classOpenMM_1_1Vec3.html</anchorfile>
      <anchor>a4ea0baeba4ebb7d0f367c6f22f61dece</anchor>
      <arglist>(double rhs)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dot</name>
      <anchorfile>classOpenMM_1_1Vec3.html</anchorfile>
      <anchor>a2c6042e383582bf3157fbda510b7d17c</anchor>
      <arglist>(const Vec3 &amp;rhs) const </arglist>
    </member>
    <member kind="function">
      <type>Vec3</type>
      <name>cross</name>
      <anchorfile>classOpenMM_1_1Vec3.html</anchorfile>
      <anchor>a7064a64061260527d5a184f9da2510ae</anchor>
      <arglist>(const Vec3 &amp;rhs) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::VerletIntegrator</name>
    <filename>classOpenMM_1_1VerletIntegrator.html</filename>
    <base>OpenMM::Integrator</base>
    <member kind="function">
      <type></type>
      <name>VerletIntegrator</name>
      <anchorfile>classOpenMM_1_1VerletIntegrator.html</anchorfile>
      <anchor>a7d4cee56a70d9b039364a59efc43c2ef</anchor>
      <arglist>(double stepSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step</name>
      <anchorfile>classOpenMM_1_1VerletIntegrator.html</anchorfile>
      <anchor>a670ab49c98d37df4ffdd814ff6428fc8</anchor>
      <arglist>(int steps)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classOpenMM_1_1VerletIntegrator.html</anchorfile>
      <anchor>a941fcc46a4e6e1fed160f03aa6cb04a5</anchor>
      <arglist>(ContextImpl &amp;context)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>cleanup</name>
      <anchorfile>classOpenMM_1_1VerletIntegrator.html</anchorfile>
      <anchor>a4b66d5e31b5dc18b314c8a68163263bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getKernelNames</name>
      <anchorfile>classOpenMM_1_1VerletIntegrator.html</anchorfile>
      <anchor>a227682eb0bbe611b36bb6903e4569af0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>computeKineticEnergy</name>
      <anchorfile>classOpenMM_1_1VerletIntegrator.html</anchorfile>
      <anchor>a34f4fe071710d31af9ea6bfa44c66a84</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OpenMM::VirtualSite</name>
    <filename>classOpenMM_1_1VirtualSite.html</filename>
  </compound>
  <compound kind="class">
    <name>OpenMM::XmlSerializer</name>
    <filename>classOpenMM_1_1XmlSerializer.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>serialize</name>
      <anchorfile>classOpenMM_1_1XmlSerializer.html</anchorfile>
      <anchor>ad154a9bfca35d36987322fb30a3c96f0</anchor>
      <arglist>(const T *object, const std::string &amp;rootName, std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static T *</type>
      <name>deserialize</name>
      <anchorfile>classOpenMM_1_1XmlSerializer.html</anchorfile>
      <anchor>a9362ce94af5c9334549778fffe771994</anchor>
      <arglist>(std::istream &amp;stream)</arglist>
    </member>
  </compound>
  <compound kind="dir">
    <name>amoeba</name>
    <path>/home/vagrant/openmm/plugins/amoeba/</path>
    <filename>dir_5e1aab5aa3be7a13bba1382731760aae.html</filename>
    <dir>openmmapi</dir>
  </compound>
  <compound kind="dir">
    <name>drude</name>
    <path>/home/vagrant/openmm/plugins/drude/</path>
    <filename>dir_abbc0e92cd42e00537052a66010725d3.html</filename>
    <dir>openmmapi</dir>
  </compound>
  <compound kind="dir">
    <name>include</name>
    <path>/home/vagrant/openmm/serialization/include/</path>
    <filename>dir_2e5258f6c515b8c1837afc6f7af95f15.html</filename>
    <dir>openmm</dir>
  </compound>
  <compound kind="dir">
    <name>include</name>
    <path>/home/vagrant/openmm/plugins/rpmd/openmmapi/include/</path>
    <filename>dir_6fdd6c8ccfd262f41878e94adb12e49f.html</filename>
    <dir>openmm</dir>
  </compound>
  <compound kind="dir">
    <name>include</name>
    <path>/home/vagrant/openmm/olla/include/</path>
    <filename>dir_66d8ca09efefc217b0fedd6714ebbf8c.html</filename>
    <dir>openmm</dir>
  </compound>
  <compound kind="dir">
    <name>include</name>
    <path>/home/vagrant/openmm/plugins/drude/openmmapi/include/</path>
    <filename>dir_f1d7c4d6f962eb9cb4b3de1249b871bf.html</filename>
    <dir>openmm</dir>
    <file>OpenMMDrude.h</file>
  </compound>
  <compound kind="dir">
    <name>include</name>
    <path>/home/vagrant/openmm/openmmapi/include/</path>
    <filename>dir_bc59eec98ccd91160827c88d846fae62.html</filename>
    <dir>openmm</dir>
    <file>OpenMM.h</file>
  </compound>
  <compound kind="dir">
    <name>include</name>
    <path>/home/vagrant/openmm/plugins/amoeba/openmmapi/include/</path>
    <filename>dir_14328a9a4f5ed451b83e4cdf21894078.html</filename>
    <dir>openmm</dir>
    <file>OpenMMAmoeba.h</file>
  </compound>
  <compound kind="dir">
    <name>olla</name>
    <path>/home/vagrant/openmm/olla/</path>
    <filename>dir_24ea53411dc59baacbca5ae899aa5eca.html</filename>
    <dir>include</dir>
    <dir>src</dir>
  </compound>
  <compound kind="dir">
    <name>openmm</name>
    <path>/home/vagrant/openmm/serialization/include/openmm/</path>
    <filename>dir_6274d903ad1b2cccc2e8786a0643123e.html</filename>
    <dir>serialization</dir>
  </compound>
  <compound kind="dir">
    <name>openmm</name>
    <path>/home/vagrant/openmm/plugins/rpmd/openmmapi/include/openmm/</path>
    <filename>dir_3e2fd8346b75195fd3c88bc8317ceb15.html</filename>
    <file>RPMDIntegrator.h</file>
    <file>RPMDMonteCarloBarostat.h</file>
    <file>RPMDUpdater.h</file>
  </compound>
  <compound kind="dir">
    <name>openmm</name>
    <path>/home/vagrant/openmm/olla/include/openmm/</path>
    <filename>dir_49c95f6abc9c489414f6ecf1e4bb07de.html</filename>
    <file>Kernel.h</file>
    <file>KernelFactory.h</file>
    <file>KernelImpl.h</file>
    <file>Platform.h</file>
    <file>PluginInitializer.h</file>
  </compound>
  <compound kind="dir">
    <name>openmm</name>
    <path>/home/vagrant/openmm/plugins/drude/openmmapi/include/openmm/</path>
    <filename>dir_d58067328b2ce858f2736b43fe8e4dcc.html</filename>
    <file>DrudeForce.h</file>
    <file>DrudeLangevinIntegrator.h</file>
    <file>DrudeSCFIntegrator.h</file>
  </compound>
  <compound kind="dir">
    <name>openmm</name>
    <path>/home/vagrant/openmm/openmmapi/include/openmm/</path>
    <filename>dir_eeab74a48ffed6ee56088077d082fac7.html</filename>
    <file>AndersenThermostat.h</file>
    <file>BrownianIntegrator.h</file>
    <file>CMAPTorsionForce.h</file>
    <file>CMMotionRemover.h</file>
    <file>Context.h</file>
    <file>CustomAngleForce.h</file>
    <file>CustomBondForce.h</file>
    <file>CustomCompoundBondForce.h</file>
    <file>CustomExternalForce.h</file>
    <file>CustomGBForce.h</file>
    <file>CustomHbondForce.h</file>
    <file>CustomIntegrator.h</file>
    <file>CustomManyParticleForce.h</file>
    <file>CustomNonbondedForce.h</file>
    <file>CustomTorsionForce.h</file>
    <file>Force.h</file>
    <file>GBSAOBCForce.h</file>
    <file>GBVIForce.h</file>
    <file>HarmonicAngleForce.h</file>
    <file>HarmonicBondForce.h</file>
    <file>Integrator.h</file>
    <file>LangevinIntegrator.h</file>
    <file>LocalEnergyMinimizer.h</file>
    <file>MonteCarloAnisotropicBarostat.h</file>
    <file>MonteCarloBarostat.h</file>
    <file>MonteCarloMembraneBarostat.h</file>
    <file>NonbondedForce.h</file>
    <file>OpenMMException.h</file>
    <file>PeriodicTorsionForce.h</file>
    <file>RBTorsionForce.h</file>
    <file>State.h</file>
    <file>System.h</file>
    <file>TabulatedFunction.h</file>
    <file>Units.h</file>
    <file>VariableLangevinIntegrator.h</file>
    <file>VariableVerletIntegrator.h</file>
    <file>Vec3.h</file>
    <file>VerletIntegrator.h</file>
    <file>VirtualSite.h</file>
  </compound>
  <compound kind="dir">
    <name>openmm</name>
    <path>/home/vagrant/openmm/plugins/amoeba/openmmapi/include/openmm/</path>
    <filename>dir_ac37386266b9bbe239d8874095a8d9b1.html</filename>
    <file>AmoebaAngleForce.h</file>
    <file>AmoebaBondForce.h</file>
    <file>AmoebaGeneralizedKirkwoodForce.h</file>
    <file>AmoebaInPlaneAngleForce.h</file>
    <file>AmoebaMultipoleForce.h</file>
    <file>AmoebaOutOfPlaneBendForce.h</file>
    <file>AmoebaPiTorsionForce.h</file>
    <file>AmoebaStretchBendForce.h</file>
    <file>AmoebaTorsionTorsionForce.h</file>
    <file>AmoebaVdwForce.h</file>
    <file>AmoebaWcaDispersionForce.h</file>
  </compound>
  <compound kind="dir">
    <name>openmm</name>
    <path>/home/vagrant/openmm/</path>
    <filename>dir_b0346fb560c11fe3203e0545cb25f0b6.html</filename>
    <dir>olla</dir>
    <dir>openmmapi</dir>
    <dir>plugins</dir>
    <dir>serialization</dir>
  </compound>
  <compound kind="dir">
    <name>openmmapi</name>
    <path>/home/vagrant/openmm/plugins/rpmd/openmmapi/</path>
    <filename>dir_0cce8c7d8579c3095a61bc1fb2c92da8.html</filename>
    <dir>include</dir>
  </compound>
  <compound kind="dir">
    <name>openmmapi</name>
    <path>/home/vagrant/openmm/plugins/drude/openmmapi/</path>
    <filename>dir_e19d7d2e0dc79f38d661c8ff0d233844.html</filename>
    <dir>include</dir>
  </compound>
  <compound kind="dir">
    <name>openmmapi</name>
    <path>/home/vagrant/openmm/openmmapi/</path>
    <filename>dir_91ce0219bc52aca203d708d835218974.html</filename>
    <dir>include</dir>
  </compound>
  <compound kind="dir">
    <name>openmmapi</name>
    <path>/home/vagrant/openmm/plugins/amoeba/openmmapi/</path>
    <filename>dir_2a62c002b20b55ff06539a28c37b4924.html</filename>
    <dir>include</dir>
  </compound>
  <compound kind="dir">
    <name>plugins</name>
    <path>/home/vagrant/openmm/plugins/</path>
    <filename>dir_4061a143690ee1b3de9aa8a3e1839722.html</filename>
    <dir>amoeba</dir>
    <dir>drude</dir>
    <dir>rpmd</dir>
  </compound>
  <compound kind="dir">
    <name>rpmd</name>
    <path>/home/vagrant/openmm/plugins/rpmd/</path>
    <filename>dir_8e8c05a3775dd1d4988c5686c67d7202.html</filename>
    <dir>openmmapi</dir>
  </compound>
  <compound kind="dir">
    <name>serialization</name>
    <path>/home/vagrant/openmm/serialization/include/openmm/serialization/</path>
    <filename>dir_cc24ae3eae62330d686887ef40460e2d.html</filename>
    <file>XmlSerializer.h</file>
  </compound>
  <compound kind="dir">
    <name>serialization</name>
    <path>/home/vagrant/openmm/serialization/</path>
    <filename>dir_b6a11001980993c020fe09eb40c4070f.html</filename>
    <dir>include</dir>
  </compound>
  <compound kind="dir">
    <name>src</name>
    <path>/home/vagrant/openmm/olla/src/</path>
    <filename>dir_129245fe1c9f262b6b61876522339303.html</filename>
    <file>Kernel.cpp</file>
    <file>KernelImpl.cpp</file>
    <file>Platform.cpp</file>
  </compound>
</tagfile>
